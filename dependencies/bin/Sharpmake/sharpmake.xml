<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharpmake</name>
    </assembly>
    <members>
        <member name="T:Sharpmake.Analyzer.Analyzer">
            <summary>
            Contains methods for specific analysis on a sharpmake DLL
            </summary>
        </member>
        <member name="M:Sharpmake.Analyzer.Analyzer.AnalyzeConfigure(System.Func{Sharpmake.BuildContext.BaseBuildContext,Sharpmake.Builder},System.Boolean)">
            <summary>
            Analyzes configure methods to find all the Configure() dependent on the call order within the same priority 
            </summary>
            <param name="builderFactory">a Functor creator of builder</param>
            <param name="stopOnFirstError"></param>
            <returns>a collection of the method dependent on any other methods</returns>
        </member>
        <member name="T:Sharpmake.Analyzer.ConfigureMethodInfo">
            <summary>
            Typical wrapper for a Configure MethodInfo
            Allows to keep a track of the dependency and the dependents of a configure method
            </summary>
        </member>
        <member name="P:Sharpmake.Assembler.Assemblies">
            <summary>
            Extra user assembly to use while compiling
            </summary>
        </member>
        <member name="P:Sharpmake.Assembler.References">
            <summary>
            Extra user assembly file name to use while compiling
            </summary>
        </member>
        <member name="P:Sharpmake.Assembler.AttributeParsers">
            <summary>
            Source attribute parser to use to add configuration based on source code
            </summary>
        </member>
        <member name="P:Sharpmake.Assembler.ParsingFlowParsers">
            <summary>
            Parsing flow parsers to use to add configuration based on source code
            </summary>
        </member>
        <member name="M:Sharpmake.Assembler.#cctor">
            <summary>
            Static constructor called at executable init time
            </summary>
        </member>
        <member name="M:Sharpmake.Assembler.CleanupTmpAssemblies">
            <summary>
            This method is intended to be called at executable init time. 
            It let us avoid exceptions when executing sharpmake several times in loops(exception can occur in the cs compiler
            when it tries to create pdb files and some already exists. Maybe that previous sharpmake sometimes still has some handles to the file?).
            With this cleanup code active there is no exception anymore on my PC. Previously I had the exception almost 100% on the second or third iteration
            of a stability test(executing sharpmake in loop to insure it always generate the same thing).
            </summary>
            <remarks>
            Was previously having the following exception when running stability tests(on subsequents sharpmake execution runs):
            Unexpected error creating debug information file 'c:\Users\xxxx\AppData\Local\Temp\Sharpmake.Assembler_1.tmp.PDB' -- 'c:\Users\xxxx\AppData\Local\Temp\Sharpmake.Assembler_1.tmp.pdb: The process cannot access the file because it is being used by another process.
            </remarks>
        </member>
        <member name="M:Sharpmake.Assembler.GetTmpAssemblyBasePath">
            <summary>
            Get the base path of temporary assembly files.
            </summary>
            <returns>the base path</returns>
        </member>
        <member name="M:Sharpmake.Assembler.GetTmpAssemblyFilePrefix">
            <summary>
            Get the assembly files common prefixes for all temporary assemblies generated in this process.
            </summary>
            <returns>the prefix</returns>
        </member>
        <member name="M:Sharpmake.Assembler.GetNextTmpAssemblyFilePath">
            <summary>
            Get the next temporary assembly file path.
            </summary>
            <returns>path of next temporary assembly</returns>
        </member>
        <member name="T:Sharpmake.ConfigurePriority">
            <summary>
            This method attribute is used to specify the execution order of Configure(...) within
            a project or a solution generation
            
            If this attribute is not set a default value a 0 is used
            
            The configure methods using this property are sorted ascendingly.
            ex: ... -1 before 0 before 1 ...
            
            See Configure method attribute and Configurable class for more details
            </summary>
        </member>
        <member name="P:Sharpmake.ConfigurePriority.Priority">
            <summary>
            Priority level of the configure method
            </summary>
        </member>
        <member name="M:Sharpmake.ConfigurePriority.#ctor(System.Int32)">
            <summary>
            Priority attribute of a configure method
            </summary>
            <param name="priority">Priority level of the configure method</param>
        </member>
        <member name="T:Sharpmake.CompositeFragmentAttribute">
            <summary>
            Marks elements of fragments that should not be considered individual fragments.
            </summary>
            <remarks>
            When an enumeration is marked with <see cref="T:Sharpmake.Fragment"/>, Sharpmake normally ensure that
            each element sets 1 and only 1 bit. However, it is often useful in a bit enum to combine
            multiple bits together to create sets that go well together. To prevent Sharpmake from
            considering those errors, you must decorate these enum members with
            <see cref="T:Sharpmake.CompositeFragmentAttribute"/>.
            </remarks>
        </member>
        <member name="M:Sharpmake.BuildContext.BaseBuildContext.CreateConfigureCollection(System.Type)">
            <summary>
            Creates and enumerable of Configure(...) method info based on the given type.
            Useful to have different sorts to support old Sharpmake versions or to analyze
            dependencies between Configure functions.
            </summary>
            <param name="type">type on which to get the configure methods</param>
            <returns>an ordered enumeration of method info</returns>
        </member>
        <member name="T:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.MethodTestCase">
            <summary>
            Tests a specific method to find it's closest dependency.
            Doesn't find all dependencies.
            </summary>
        </member>
        <member name="M:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.MethodTestCase.CreateMethodTestCase(System.Type,Sharpmake.ConfigurePriority,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates method test cases based on the information given
            </summary>
            <param name="type">Type of the project or solution to analyze</param>
            <param name="priority">Priority group of the methods</param>
            <param name="methods">Methods to analyze</param>
            <returns>The test cases to execute</returns>
        </member>
        <member name="M:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.MethodTestCase.CreateMethodTestCase(System.Type,Sharpmake.ConfigurePriority,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Sharpmake.BuildContext.ConfigureSignature}@)">
            <summary>
            Creates method test cases based on the information given
            Should be call if you know that the methods contains an error.
            </summary>
            <param name="type">Type of the project or solution to analyze</param>
            <param name="priority">Priority group of the methods</param>
            <param name="methods">Methods to analyze</param>
            <param name="suspectedMethods">[out] The methods suspected before processing if any</param>
            <returns>The test cases to execute</returns>
        </member>
        <member name="T:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.PriorityTestCase">
            <summary>
            Tests a specific priority if either is contains dependent methods or not.
            </summary>
        </member>
        <member name="M:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.PriorityTestCase.CreatePriorityTestCase(System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Sharpmake.ConfigurePriority,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Creates tests case for all given priority of needed.
            </summary>
            <param name="type">Source Type of the priorities and methods</param>
            <param name="priorities">Priorities to analyze</param>
            <returns>a list of test case to execute</returns>
        </member>
        <member name="M:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.PriorityTestCase.CreatePriorityTestCase(System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Sharpmake.ConfigurePriority,System.Collections.Generic.IEnumerable{System.String}}},System.Collections.Generic.IEnumerable{Sharpmake.BuildContext.ConfigureSignature}@)">
            <summary>
            Creates the tests case to analyze a list of priority.
            Must be used only if you are sure the type have dependent methods
            </summary>
            <param name="type">Type to analyze</param>
            <param name="priorities">Priorities to analyze</param>
            <param name="suspectedMethods">[out] the methods suspected before the first iteration</param>
            <returns>a list of test case to execute</returns>
        </member>
        <member name="T:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.TypeTestCase">
            <summary>
            Tests a specific type if either is contains dependent methods or not.
            </summary>
        </member>
        <member name="T:Sharpmake.BuildContext.ConfigureDependencyAnalyzer.AnalysisFirstPass">
            <summary>
            First pass of the whole analysis. Builds and array of all the content to be analyzed
            </summary>
        </member>
        <member name="T:Sharpmake.BuilderEventAttribute">
            <summary>
            Put this attribute on a static method that match the name and signature of an Event in the Builder class, and it will be called automatically.
            </summary>
        </member>
        <member name="M:Sharpmake.BuilderExtension.RegisterExtensionAssembly(System.Reflection.Assembly)">
            <summary>
            Scans a Sharpmake extension assembly for builder's event extension, and then hook them to the builder's events.
            </summary>
            <param name="extensionAssembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
        </member>
        <member name="P:Sharpmake.Configuration.Owner">
            <summary>
            Default options is used to select an options if not set, default may be debug or release setting
            see Sharpmake.Options class to know associated default setting to debug or release.
            </summary>
        </member>
        <member name="F:Sharpmake.ConfigureOrder.Old">
            <summary>
            Orders the configure methods by the first definition of the configure.
            With default order given by reflection:
            http://pierrerebours.com/blog/order-returned-getmethods
            The order can't be predicted.
            </summary>
        </member>
        <member name="F:Sharpmake.ConfigureOrder.New">
            <summary>
            Orders the configure methods by the first definition of the configure and the MetadataToken of the method.
            e.g. 
            class A     { virtual  void foo() { }   void bar() { } }
            class B : A { override void foo() { }   void buz() { } }
            Assuming foo(), bar() and buz() are marked as configure methods,
            if A is generated, foo() will be called then bar() will be called
            if B is generated, the call sequence will be foo(), bar(), buz()
            </summary>
        </member>
        <member name="T:Sharpmake.DebugBreaks">
            <summary>
            The DebugBreaks are used to help with debugging, allowing conditional breakpoints that are
            built-in in code.  Feel free to add more as you need them while debugging Sharpmake. 
            </summary>
        </member>
        <member name="T:Sharpmake.DebugProjectGenerator">
            <summary>
            Generates debug projects and solutions
            </summary>
        </member>
        <member name="M:Sharpmake.DebugProjectGenerator.GenerateDebugSolution(System.String[],Sharpmake.Arguments,System.String)">
            <summary>
            Generates debug projects and solutions
            </summary>
            <param name="sources"></param>
            <param name="arguments"></param>
            <param name="startArguments"></param>
        </member>
        <member name="M:Sharpmake.DebugProjectGenerator.GenerateDebugSolution(System.String[],Sharpmake.Arguments,System.String,System.String[])">
            <summary>
            Generates debug projects and solutions
            </summary>
            <param name="sources"></param>
            <param name="arguments"></param>
            <param name="startArguments"></param>
            <param name="defines"></param>
        </member>
        <member name="M:Sharpmake.DebugProjectGenerator.GenerateDebugSolution(System.String[],System.String,Sharpmake.Arguments,System.String)">
            <summary>
            Generates debug projects and solutions
            </summary>
            <param name="sources"></param>
            <param name="solutionPath"></param>
            <param name="arguments"></param>
            <param name="startArguments"></param>
        </member>
        <member name="M:Sharpmake.DebugProjectGenerator.SetupProjectOptions(Sharpmake.Project.Configuration,System.String)">
            <summary>
            Set up debug configuration in user file
            </summary>
            <param name="conf"></param>
            <param name="startArguments"></param>
        </member>
        <member name="T:Sharpmake.EnumExtensions">
            <summary>
            Provides a static utility object of methods and properties to interact
            with enumerated types.
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.SetFlag``1(``0,``0,System.Boolean)">
            <summary>
            Sets a flag bit to 0 or 1
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.AddFlag``1(``0,``0)">
            <summary>
            Adds a flag to an enum
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.RemoveFlag``1(``0,``0)">
            <summary>
            Removes a flag from an enum
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.ToggleFlag``1(``0,``0)">
            <summary>
            Toggles a flag in an enum
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.EnumerateFlags``1(System.Enum)">
            <summary>
            Enumerates all flags set in the enum
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.ToFlags``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Aggregates an enumerable of enum flags into one
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.EnumCast``1(System.Enum)">
            <summary>
            Casts an generic Enum to a specific one
            </summary>
        </member>
        <member name="M:Sharpmake.EnumExtensions.EnumCast``1(System.Collections.Generic.IEnumerable{System.Enum})">
            <summary>
            Casts an generic Enum to a specific one
            </summary>
        </member>
        <member name="M:Sharpmake.EnumUtils.TryParse``1(System.String,``0@)">
            <summary>
            Tries parsing a string as an enum type
            </summary>
        </member>
        <member name="M:Sharpmake.EnumUtils.ParseOrDefault``1(System.String,``0)">
            <summary>
            Parses a string as an enum type. Returns the default value if it fails.
            </summary>
        </member>
        <member name="M:Sharpmake.EnumUtils.EnumerateValues``1">
            <summary>
            Enumerates the values of an enum
            </summary>
        </member>
        <member name="T:Sharpmake.ExtensionLoader">
            <summary>
            Helper for loading Sharpmake extensions.
            </summary>
            <remarks>
            Normally, this should be done using reflection-only load, but the problem is that you have
            to resolve the dependencies yourself. Turns out that it's simpler to actually let the CLR
            do a full load in a temporary <see cref="T:System.AppDomain"/> that we can trash later.
            </remarks>
        </member>
        <member name="M:Sharpmake.ExtensionLoader.Dispose">
            <summary>
            Releases the remote <see cref="T:System.AppDomain"/> if one was created.
            </summary>
        </member>
        <member name="M:Sharpmake.ExtensionLoader.IsExtension(System.String)">
            <summary>
            Gets whether an assembly is a Sharpmake extension.
            </summary>
            <param name="assemblyPath">The path of the assembly to check whether it's an extension.</param>
            <returns>`true` if it is an extension, `false` otherwise.</returns>
            <remarks>
            This method will instantiate a remote <see cref="T:System.AppDomain"/> if none was created.
            </remarks>
        </member>
        <member name="M:Sharpmake.ExtensionLoader.LoadExtension(System.String,System.Boolean)">
            <summary>
            Loads a Sharpmake extension assembly.
            </summary>
            <param name="assemblyPath">The path of the assembly that contains the Sharpmake extension.</param>
            <param name="fastLoad">Whether this method should load the assembly remotely first. See remarks.</param>
            <returns>The loaded extension's <see cref="T:System.Reflection.Assembly"/>.</returns>
            <remarks>
            Because loading an extension in a remote assembly for validation is expensive, this
            method provides the <paramref name="fastLoad"/> argument which, when `false`, will load
            the extension in the current <see cref="T:System.AppDomain"/> instead of doing so in a remote
            <see cref="T:System.AppDomain"/>, testing whether it contains
            <see cref="T:Sharpmake.SharpmakeExtensionAttribute"/>, and then loading it again in
            <see cref="P:System.AppDomain.CurrentDomain"/>. However, because it is impossible to unload a
            loaded assembly from the CLR, if this method fail you have essentially polluted the
            process' address space with an assembly that you may not need.
            </remarks>
        </member>
        <member name="M:Sharpmake.ExtensionLoader.LoadExtensionsInDirectory(System.String)">
            <summary>
            Loads all Sharpmake extensions in a directory.
            </summary>
            <param name="directory">The path to the directory to scan for assemblies.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the loaded <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Sharpmake.ExtensionMethods.GetMSBuildVCDirVersion(Sharpmake.DevEnv)">
            <summary>
            Will return the name of the root directory in MSBuild under Microsoft/VC for a particular devenv,
            since it uses yet another versioning pattern than the toolchain
            </summary>
            <param name="visualVersion">The visual studio version to convert</param>
            <returns>The name of the directory for that version</returns>
        </member>
        <member name="M:Sharpmake.ExtensionMethods.IsVisualStudio(Sharpmake.DevEnv)">
            <summary>
            Gets whether a <see cref="T:Sharpmake.DevEnv"/> is a Visual Studio version.
            </summary>
            <param name="devEnv">The <see cref="T:Sharpmake.DevEnv"/> to check.</param>
            <returns>`true` if <paramref name="devEnv"/> is a Visual Studio version, `false` otherwise.</returns>
        </member>
        <member name="M:Sharpmake.ExtensionMethods.IsAbiCompatibleWith(Sharpmake.DevEnv,Sharpmake.DevEnv)">
            <summary>
            Gets whether two <see cref="T:Sharpmake.DevEnv"/> values generate ABI-compatible binaries with
            their respective C++ compiler.
            </summary>
            <param name="devEnv">The <see cref="T:Sharpmake.DevEnv"/> to check for ABI-compatibility.</param>
            <param name="other">The other <see cref="T:Sharpmake.DevEnv"/> to check for ABI-compatibility with.</param>
            <returns>`true` if ABI-compatible, `false` otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="devEnv"/> is not a Visual Studio version.</exception>
            <remarks>
            Only works for Visual Studio versions because other DevEnvs (such as Eclipse) are not
            shipped with a compiler version.
            </remarks>
        </member>
        <member name="M:Sharpmake.Util.GetPathIntersection(System.String,System.String)">
            <summary>
            Gets the absolute path up to the intersection of two specified absolute paths.
            </summary>
            <param name="absPathA">First absolute path.</param>
            <param name="absPathB">Second absolute path.</param>
            <returns>Returns an absolute path up to the intersection of both specified paths.</returns>
        </member>
        <member name="M:Sharpmake.Util.DecapitalizeDriveLetter(System.String)">
            <summary>
            Returns path with drive letter in lower case.
            
            WSL mounts windows drive using lowercase letters: /mnt/c, /mnt/d...
            </summary>
            <param name="path">The path to be modified.</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.Util.ReplaceHeadPath(System.String,System.String,System.String)">
            <summary>
            The input path got its beginning of path matching the inputHeadPath replaced by the replacementHeadPath.
            
            Throws if the fullInputPath doesn't start with inputHeadPath.
            
            Function is case insensitive but preserves path casing.
            </summary>
            <param name="fullInputPath">The path to be modified.</param>
            <param name="inputHeadPath">The subpath in the head of fullInputPath to replace.</param>
            <param name="replacementHeadPath">The subpath that will replace the inputHeadPath</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.Util.GetDeterministicHashCode(System.String)">
            <summary>
            This method will return a deterministic hash for a string.
            </summary>
            <remarks>
            With net core the regular GetHashCode() is now
            seeded for security reasons.
            </remarks>
            <see href="https://andrewlock.net/why-is-string-gethashcode-different-each-time-i-run-my-program-in-net-core/"/>
            <param name="str">The input string</param>
            <returns>A deterministic hash</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sharpmake.Util.GetTextTemplateDirectiveParam(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Sharpmake.Util.ExecuteFilesAutoCleanup" -->
        <member name="M:Sharpmake.Util.GetCurrentSharpmakeCallerInfo">
            <summary>
             Search the call stack and return the info about the topmost frame from a file that is edited by the user (.sharpmake or .sharpmake.cs)
            </summary>
            <returns> Caller info in a format clickable in the output console if a .sharpmake frame is found. Otherwise return an empty string. </returns>
        </member>
        <member name="M:Sharpmake.Util.GetCallerInfoFromStack">
            <summary>
             Lookup the callstack and return the info about the 2nd topmost frame (topmost being where this method is called from) .
            </summary>
            <returns> Caller info in a format clickable in the output console.</returns>
        </member>
        <member name="M:Sharpmake.Util.BuildGuid(System.String)">
            <summary>
            Build a fake Guid from input string value.
            </summary>
            <param name="value">String value to generate guid from.</param>
            <returns></returns>
        </member>
        <member name="T:Sharpmake.Util.JsonSerializer">
            A simple json serializer.
            Does not serialize objects properties using reflection, data must be prepared by the caller.
            Supported types : IEnumerable, IDictionnary, string and system value types.
        </member>
        <member name="P:Sharpmake.Util.VsInstallation.ProductID">
            <summary>
            The full list of products can be found here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
            </summary>
        </member>
        <member name="P:Sharpmake.Util.VsInstallation.Workloads">
            <summary>
            This can be used to check and limit by specific installed workloads.
            
            What is a Workload?
            In the VS installer, a 'Workload' is a section that you see in the UI such as 'Desktop development with C++' or '.NET desktop development'.
            
            The full list of products is here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
            
            For each product, clicking it will bring up a page of all of the possible Workloads.
            For example: https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-professional
            </summary>
        </member>
        <member name="P:Sharpmake.Util.VsInstallation.Components">
            <summary>
            This can be used to check and limit by specific installed components.
            What is a Component?
            In the Visual Studio Installer, the 'Components' are individual components associated with each Workload (and some just on the side), 
            that you can see in the Summary on the right.
            Each workflow contains a number of mandatory components, but also a list of optional ones.
            An example would be: 'NuGet package manager' or 'C++/CLI support'.
            
            The full list of products is here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
            
            For each product, clicking it will bring up a page of all of the possible Workloads.
            For example: https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-professional
            </summary>
        </member>
        <member name="F:Sharpmake.Util.s_supportedVisualStudioProducts">
             <summary>
             The supported visual studio products, in order by priority in which Sharpmake will choose them.
             We want to block products like the standalone Team Explorer, which is in the Visual Studio
             family yet isn't a variant of Visual Studio proper.
            
             The list of Product IDs can be found here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
             </summary>
        </member>
        <member name="M:Sharpmake.Util.BuildGuid(System.String,System.String)">
            <summary>
            Generate a pseudo Guid base on relative path from the Project GuidReference path to the generated files
            Need to do it that way because many vcproj may be generated from the same Project.
            </summary>
        </member>
        <member name="M:Sharpmake.Util.GetValueOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Extension GetValueOrAdd gets the value at the given key or adds at the given key the value provided
            </summary>
            <typeparam name="Key">Type of the key</typeparam>
            <typeparam name="Value">Type of the value</typeparam>
            <param name="dictionary">dictionary in which to search</param>
            <param name="key">key of the value</param>
            <param name="addValue">value created</param>
            <returns>the value at the given key (created or not in this call)</returns>
        </member>
        <member name="M:Sharpmake.Util.PickOrConcatCallerInfo(System.String,System.String)">
            <summary>
            Look up 2 callerInfo string.
            </summary>
            <param name="callerInfo1"></param>
            <param name="callerInfo2"></param>
            <returns>
            1.if they are both referring to file edited by sharpmake user (.sharpmake): concatenation of both separated by a line return
            2.if only callerInfo2 refer to file edited by sharpmake user (.sharpmake): callerInfo2
            3.otherwise: callerInfo1
            </returns>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.SystemRoot">
            <summary>
            Full path to the %WINDIR% directory.
            Usually equals to `C:\WINDOWS`.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.SystemDllRoot">
            <summary>
            Full path to the system dll folder where the ucrtbase.dll and api-ms-win-*.dll can be found.
            If left null, dlls will be searched in the Redist\ucrt\DLLs\x64 subfolder of the WinSDK10 indicated in the KitsRootPaths.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sharpmake.FastBuildSettings.CachePath" -->
        <member name="F:Sharpmake.FastBuildSettings.AdditionalGlobalSettings">
            <summary>
            Additional settings to add to the global settings node.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.CachePluginDLLFilePath">
            <summary>
            Path to the fastbuild plugin dll if any. This typically will be the path to the Ubisoft asset store plugin DLL but could be any other compatible implementation.
            CachePath must also be set to an appropriate url.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.CacheType">
            <summary>
            Cache configuration type for targets allowing the cache
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.FastBuildAllowDBMigration">
            <summary>
            Allows retention of build state across BFF changes. Requires v0.97
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.FastBuildMakeCommand">
            <summary>
            The path to the executable used to start a fastbuild compilation. This path is relative to the source tree root.
            ex: @"tools\FastBuild\start-fbuild.bat"
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.FastBuildSupportEnabled">
            <summary>
            Can be set to false to override all FastBuild settings and disable it
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.IncludeBFFInProjects">
            <summary>
            Include the .bff files in the visual studio project files. Some programmer don't like that as when they do finds in Visual Studio, this
            adds useless results to their finds whenever the string they are searching matches the name of a .cpp file.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.EnableFastLinkPDBSupport">
            <summary>
            If true, activate PDB Support for FastLink. Instead of having a single .pdb file for a whole project, split in many smaller .pdb files.
            This is incompatible with FastBuildSettings.EnablePrecompiledHeaders.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.WriteAllConfigsSection">
            <summary>
            Adds an alias to the Master Bff containing all the configs
            This section is used for example in the submit assistant on AC
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.SetPathToResourceCompilerInEnvironment">
            <summary>
            link.exe on win64 executes rc.exe by itself on some occasions
            if it doesn't find it, link errors can occur, like:
            fatal error LNK1158: cannot run rc.exe!
            
            Setting this to true will have sharpmake detect if a rc.exe can
            be found in the same folder as link.exe, and if not add the path
            to one in the global settings Environment section, in the PATH variable
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.EnableVS2012EnumBugWorkaround">
             <summary>
             This is used to activate a workaround in fastbuild for the VS2012 preprocessor enum bug. 
             
             Notes: Only win64 is affected by this bug it seems.
             </summary>
             <remarks>
             VS 2012 sometimes generates corrupted code when preprocessing an already preprocessed file when it encounters
             enum definitions.
             Example:
            enum dateorder
            {
                no_order, dmy, mdy, ymd, ydm
            };
             Become :
            enummdateorder
            {
                no_order, dmy, mdy, ymd, ydm
            };
             And then compilation fails.
             
             It seems that by adding a space between the enum keyword and the name it avoids that problem that looks like memory corruption in the compiler.
             Also it seems that this doesn't occurs with VS2013.
             </remarks>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.CompilersUsingRelativePaths">
            <summary>
            FastBuild names of compilers to set the 'UseRelativePaths_Experimental' option for.
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.AdditionalCompilerSettings">
            <summary>
            Additional settings to add to the Compiler node, keyed by compiler name.
            </summary>
            
        </member>
        <member name="F:Sharpmake.FastBuildSettings.AdditionalCompilerPropertyGroups">
            <summary>
            Additional Section referred by a compiler node, keyed by compiler name
            </summary>
        </member>
        <member name="F:Sharpmake.FastBuildSettings.AdditionalPropertyGroups">
            <summary>
            Additional custom property groups. Only those referred will be written to the bff files.
            </summary>
        </member>
        <member name="T:Sharpmake.FileSystemStringComparer">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that switches between case-sensitive
            to case-insensitive based on the operating system.
            </summary>
            <remarks>
            This class is a simple wrapper around either <see cref="P:System.StringComparer.Ordinal"/> (if the
            host operating system is Linux or Max OSX) or
            <see cref="P:System.StringComparer.OrdinalIgnoreCase"/> (on Windows operating systems.) You should
            use an instance of this class as the comparer when creating collections indexed on with
            file names.
            </remarks>
        </member>
        <member name="M:Sharpmake.FileSystemStringComparer.#ctor">
            <summary>
            Creates a new <see cref="T:Sharpmake.FileSystemStringComparer"/> instance whose case sensitivity is
            the same as the case sensitivity of the host operating system's file system.
            </summary>
        </member>
        <member name="M:Sharpmake.FileSystemStringComparer.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Sharpmake.FileSystemStringComparer"/>.
            </summary>
            <param name="caseSensitive">The case-sensitivity mode to use in file name comparisons.</param>
        </member>
        <member name="T:Sharpmake.ICommandLineInterface">
            <summary>
            Interface for objects that expose additional command line interfaces for a given platform.
            This allows platforms to extend the command line interface of Sharpmake.
            </summary>
        </member>
        <member name="M:Sharpmake.ICommandLineInterface.Validate">
            <summary>
            Validates that the command line arguments are valid.
            </summary>
        </member>
        <member name="T:Sharpmake.IPlatformDescriptor">
            <summary>
            Interface for objects that describe the general properties of a platform.
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.SimplePlatformString">
            <summary>
            Gets a simple string that describes the platform.
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.IsMicrosoftPlatform">
            <summary>
            Gets whether this is a proprietary platform owned by Microsoft Corporation.
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.IsPcPlatform">
            <summary>
            Gets whether this is a PC platform. (Mac, Windows, etc.)
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.IsUsingClang">
            <summary>
            Gets whether this platform supports Clang.
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.HasDotNetSupport">
            <summary>
            Gets whether this is a .NET platform.
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.HasSharedLibrarySupport">
            <summary>
            Gets whether that platform supports shared libraries. (aka: dynamic link libraries.)
            </summary>
        </member>
        <member name="P:Sharpmake.IPlatformDescriptor.HasPrecompiledHeaderSupport">
            <summary>
            Gets whether precompiled headers are supported for that platform.
            </summary>
        </member>
        <member name="M:Sharpmake.IPlatformDescriptor.GetPlatformEnvironmentResolver(Sharpmake.VariableAssignment[])">
            <summary>
            Gets an environment variable resolver suited for this platform.
            </summary>
            <param name="variables">A list of <see cref="T:Sharpmake.VariableAssignment"/> that describe the environment variables to resolve.</param>
            <returns>An <see cref="T:Sharpmake.EnvironmentVariableResolver"/> instance suited for the platform.</returns>
        </member>
        <member name="T:Sharpmake.MSBuildGlobalSettings">
            <summary>
            This class contains some global msbuild settings
            </summary>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.SetCppPlatformFolder(Sharpmake.DevEnv,Sharpmake.Platform,System.String)">
            <summary>
            Allows overwriting the MSBuild platform folder used for a known sharpmake platform and Visual Studio version.
            This is typically used if you want to put VS files in source control such as Perforce or nuget.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <param name="value">The location of the MSBuild platform folder. Warning: this *must* end with a trailing separator</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.SetCppPlatformFolder(Sharpmake.DevEnv,System.String,System.String)">
            <summary>
            Allows overwriting the MSBuild platform folder used for a custom platform passed as a string and Visual Studio version.
            This is typically used if you want to put VS files in source control such as Perforce or nuget.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <param name="value">The location of the MSBuild platform folder. Warning: this *must* end with a trailing separator</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.ResetCppPlatformFolder(Sharpmake.DevEnv,System.String)">
            <summary>
            Use to reset the override of a platform
            </summary>
            <param name="devEnv">Visual studio version</param>
            <param name="platform">Platform</param>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.GetCppPlatformFolder(Sharpmake.DevEnv,Sharpmake.Platform)">
            <summary>
            Get the overwritten MSBuild platform folder used for a known sharpmake platform and Visual studio version.
            This is typically used if you want to put your VS files in source control such as Perforce or nuget.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <returns>the registered msbuild foldervalue for the requested pair. null if not found</returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.GetCppPlatformFolder(Sharpmake.DevEnv,System.String)">
            <summary>
            Get the overwritten MSBuild platform folder used for a custom platform passed as a string and Visual studio version.
            This is typically used if you want to put your VS files in source control such as Perforce or nuget.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <returns>the registered msbuild foldervalue for the requested pair. null if not found</returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.SetAdditionalVCTargetsPath(Sharpmake.DevEnv,Sharpmake.Platform,System.String)">
            <summary>
            Allows setting MSBuild vc targets path used for a known sharpmake platform and Visual Studio version.
            This is typically used if you want to add platform specific files since vs2019 as the older _PlatformFolder way of doing it is deprecated.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <param name="value">The location of the MSBuild additional VC target path. Warning: this *must* end with a trailing separator</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.SetAdditionalVCTargetsPath(Sharpmake.DevEnv,System.String,System.String)">
            <summary>
            Allows setting MSBuild vc target path used for a custom platform passed as a string and Visual Studio version.
            This is typically used if you want to add platform specific files with vs2019+ as the older way of doing it through _PlatformFolder is deprecated.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <param name="value">The location of the MSBuild additional VC target path. Warning: this *must* end with a trailing separator</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.ResetAdditionalVCTargetsPath(Sharpmake.DevEnv,System.String)">
            <summary>
            Use to reset the set of AdditionalVCTargetsPath
            </summary>
            <param name="devEnv">Visual studio version</param>
            <param name="platform">Platform</param>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.GetAdditionalVCTargetsPath(Sharpmake.DevEnv,Sharpmake.Platform)">
            <summary>
            Get the MSBuild Additional VC targets path used for a known sharpmake platform and Visual studio version.
            This is typically used if you want to add platform specific files with vs2019+ as the older way of doing it through _PlatformFolder is deprecated.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <returns>the registered msbuild additional VC targets path for the requested pair. null if not found</returns>
        </member>
        <member name="M:Sharpmake.MSBuildGlobalSettings.GetAdditionalVCTargetsPath(Sharpmake.DevEnv,System.String)">
            <summary>
            Get the MSBuild Additional VC targets path used for a custom platform passed as a string and Visual studio version.
            This is typically used if you want to add platform specific files with vs2019+ as the older way of doing it through _PlatformFolder is deprecated.
            </summary>
            <param name="devEnv">Visual studio version affected</param>
            <param name="platform">Platform affected</param>
            <returns>the registered msbuild additional VC targets for the requested pair. null if not found</returns>
        </member>
        <member name="T:Sharpmake.Options.Android.General.AndroidHome">
            <summary>
            Android SDK path
            If unset, will use Android.GlobalSettings.AndroidHome
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.NdkRoot">
            <summary>
            Android NDK path
            If unset, will use Android.GlobalSettings.NdkRoot
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.JavaHome">
            <summary>
            Java SE Development Kit path
            If unset, will use Android.GlobalSettings.JavaHome
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.AntHome">
            <summary>
            Apache Ant path
            If unset, will use Android.GlobalSettings.AntHome
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.AndroidTargetsPath">
            <summary>
            Path to the AndroidProj MSBuild files
            Expected to contain the files found in MSBuild\Microsoft\MDD\Android\V150
            If unset, line won't be written
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.ApplicationTypeRevision">
            <summary>
            Application Type Revision
            This must be a valid version string, of the form major.minor[.build[.revision]].
            Examples: 1.0, 10.0.0.0
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.AndroidGradleBuildDir">
            <summary>
            This is applicable for AGDE only
            The full path to the directory containing the top-level build.gradle file.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.AndroidApkName">
            <summary>
            Output Apk name for AGDE project which can be set per configuration.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Android.General.ShowAndroidPathsVerbosity">
            <summary>
            Verbosity of the tasks (vcxproj only)
            At the time of this writing, this only control if on build env variables values are printed
            </summary>
        </member>
        <member name="T:Sharpmake.Options.CSharp.SuppressWarning">
            <summary>
            Suppressed specific warnings in a C# project.
            </summary>
            <remarks>
            This option generates a `NoWarn` element in the C# project XML.
            </remarks>
        </member>
        <member name="M:Sharpmake.Options.CSharp.SuppressWarning.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Sharpmake.Options.CSharp.SuppressWarning"/> instance from a list of warning
            code labels.
            </summary>
            <param name="warnings">The list of warning code labels to suppress. See remarks.</param>
            <remarks>
            If <paramref name="warnings"/> contains elements that are not C# compiler
            warnings, those warning numbers *must* include the 2-letter prefix. For
            example, NuGet warnings must be prefixed by `NU`. (ie: `NU1603`)
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.CSharp.WarningsNotAsErrors">
            <summary>
            Prevent specific warnings from being treated as errors when <see cref="T:Sharpmake.Options.CSharp.TreatWarningsAsErrors"/> is enabled
            </summary>
            <remarks>
            This option generates a `WarningsNotAsErrors` element in the C# project XML.
            </remarks>
        </member>
        <member name="M:Sharpmake.Options.CSharp.WarningsNotAsErrors.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Sharpmake.Options.CSharp.WarningsNotAsErrors"/> instance from a list of warning
            code labels.
            </summary>
            <param name="warnings">The list of warning code labels to avoid treating as errors. See remarks.</param>
            <remarks>
            If <paramref name="warnings"/> contains elements that are not C# compiler
            warnings, those warning numbers *must* include the 2-letter prefix. For
            example, NuGet warnings must be prefixed by `NU`. (ie: `NU1603`)
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.CSharp.SonarQubeExclude">
            <summary>
            Exclude from SonarQube C# static analysis
            </summary>
        </member>
        <member name="T:Sharpmake.Options.CSharp.IsPublishable">
            <summary>
            Controls whether the project is published when running a publish command
            Only affects processes that use the Publish target, such as the dotnet sdk projects
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sharpmake.Options.Clang.GetTargetTriple(System.String,System.String,System.String,System.String,System.String)" -->
        <member name="T:Sharpmake.Options.Clang.Compiler.LLVMVcPlatformToolset">
            <summary>
            Foce a platform toolset different from the devenv when using LLVM platform toolset
            </summary>
            The platform toolset option used to enable the LLVM toolchain doesn't allow choosing
            the version of the toolset we want to mimic. By
        </member>
        <member name="T:Sharpmake.Options.Vc.General.PlatformToolset">
            <summary>
            Platform Toolset
            </summary>
            <remarks>
            Specifies which build tools will be used.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.WindowsTargetPlatformVersion">
            <summary>
            Windows SDK Version
            </summary>
            <remarks>
            Specifies which version of the Windows SDK to use.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.TranslateIncludes">
            <summary>
            Translate Includes to Imports
            </summary>
            <remarks>
            Enables the compiler to translate #include directives into import directives for the available header units.  (/translateInclude)
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.CharacterSet">
            <summary>
            Character Set
            </summary>
            <remarks>
            Tells the compiler to use the specified character set; aids in localization issues.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CharacterSet.Default">
            <summary>
            Not Set
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CharacterSet.Unicode">
            <summary>
            Use Unicode Character Set
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CharacterSet.MultiByte">
            <summary>
            Use Multi-Byte Character Set
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.WholeProgramOptimization">
            <summary>
            Whole Program Optimization
            </summary>
            <remarks>
            Enables cross-module optimizations by delaying code generation to link time; requires that linker option 'Link Time Code Generation' be turned on.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WholeProgramOptimization.Disable">
            <summary>
            No Whole Program Optimization
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WholeProgramOptimization.LinkTime">
            <summary>
            Use Link Time Code Generation
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WholeProgramOptimization.Instrument">
            <summary>
            Profile Guided Optimization - Instrument
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WholeProgramOptimization.Optimize">
            <summary>
            Profile Guided Optimization - Optimize
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WholeProgramOptimization.Update">
            <summary>
            Profile Guided Optimization - Update
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.DebugInformation">
            <summary>
            Debug Information Format
            </summary>
            <remarks>
            Specifies the type of debugging information generated by the compiler.  This requires compatible linker settings.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DebugInformation.Disable">
            <summary>
            None
            </summary>
            <remarks>
            Produces no debugging information, so compilation may be faster.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DebugInformation.C7Compatible">
            <summary>
            C7 compatible
            </summary>
            <remarks>
            Select the type of debugging information created for your program and whether this information is kept in object (.obj) files or in a program database (PDB).
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DebugInformation.ProgramDatabase">
            <summary>
            Program Database
            </summary>
            <remarks>
            Produces a program database (PDB) that contains type information and symbolic debugging information for use with the debugger. The symbolic debugging information includes the names and types of variables, as well as functions and line numbers.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DebugInformation.ProgramDatabaseEnC">
            <summary>
            Program Database for Edit And Continue
            </summary>
            <remarks>
            Produces a program database, as described above, in a format that supports the Edit and Continue feature.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.UseDebugLibraries">
            <summary>
            Use Debug Libraries
            </summary>
            <remarks>
            Specifies whether this configuration should use debug libraries and debug switches
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.WarningLevel">
            <summary>
            Warning Level
            </summary>
            <remarks>
            Select how strict you want the compiler to be about code errors.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.Level0">
            <summary>
            Turn Off All Warnings
            </summary>
            <remarks>
            Level 0 disables all warnings.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.Level1">
            <summary>
            Level 1 displays severe warnings. Level 1 is the default warning level at the command line.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.Level2">
            <summary>
            Level 2 displays all level 1 warnings and warnings less severe than level 1.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.Level3">
            <summary>
            Level 3 displays all level 2 warnings and all other warnings recommended for production purposes.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.Level4">
            <summary>
            Level 4 displays all level 3 warnings plus informational warnings, which in most cases can be safely ignored.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.WarningLevel.EnableAllWarnings">
            <summary>
            Enables all warnings, including those disabled by default.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.TreatWarningsAsErrors">
            <summary>
            Treat Warnings As Errors
            </summary>
            <remarks>
            Treats all compiler warnings as errors. For a new project, it may be best to use /WX in all compilations; resolving all warnings will ensure the fewest possible hard-to-find code defects.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.DiagnosticsFormat">
            <summary>
            Diagnostics Format
            </summary>
            <remarks>
            Enables rich diagnostics, with column information and source context in diagnostic messages.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DiagnosticsFormat.Caret">
            <summary>
            Provides column information in the diagnostic message, as well as outputting the relevant line of source code with a caret indicating the offending column.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DiagnosticsFormat.ColumnInfo">
            <summary>
            Additionally provides the column number within the line where the diagnostic is issued, where applicable.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.DiagnosticsFormat.Classic">
            <summary>
            Retains the prior, concise diagnostic messages with the line number.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.TreatAngleIncludeAsExternal">
            <summary>
            Treat Files Included with Angle Brackets as External
            </summary>
            <remarks>
            Specifies whether to treat files included with angle brackets as external.   (/external:anglebrackets)
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.ExternalWarningLevel">
            <summary>
            External Header Warning Level
            </summary>
            <remarks>
            Select how strict you want the compiler to be about code errors in external headers.     (/external:W0 - /external:W4)
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.Level0">
            <summary>
            Turn Off All Warnings
            </summary>
            <remarks>
            Level 0 disables all warnings.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.Level1">
            <summary>
            Level 1 displays severe warnings. Level 1 is the default warning level at the command line.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.Level2">
            <summary>
            Level 2 displays all level 1 warnings and warnings less severe than level 1.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.Level3">
            <summary>
            Level 3 displays all level 2 warnings and all other warnings recommended for production purposes.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.Level4">
            <summary>
            Level 4 displays all level 3 warnings plus informational warnings, which in most cases can be safely ignored.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.ExternalWarningLevel.InheritWarningLevel">
            <summary>
            Inherit Project Warning Level
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.ExternalTemplatesDiagnostics">
            <summary>
            Template Diagnostics in External Headers
            </summary>
            <remarks>
            Specifies whether to evaluate warning level across template instantiation chain.   (/external:templates-)
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.EnableManagedIncrementalBuild">
            <summary>
            Enable Managed Incremental Build
            </summary>
            <remarks>
            Enables managed incremental build scenarios using metagen.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.General.CommonLanguageRuntimeSupport">
            <summary>
            Common Language RunTime Support
            </summary>
            <remarks>
            Use the .NET runtime service.  This switch is incompatible with some other switches; see the documentation on the /clr family of switches for details.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CommonLanguageRuntimeSupport.NoClrSupport">
            <summary>
            No Common Language RunTime Support
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CommonLanguageRuntimeSupport.ClrSupport">
            <summary>
            Common Language RunTime Support
            </summary>
            <remarks>
            Creates metadata for your application that can be consumed by other CLR applications, and allows your application to consume types and data in the metadata of other CLR components.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CommonLanguageRuntimeSupport.PureMsilClrSupport">
            <summary>
            Pure MSIL Common Language RunTime Support
            </summary>
            <remarks>
            Produces an MSIL-only output file with no native executable code, although it can contain native types compiled to MSIL.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.General.CommonLanguageRuntimeSupport.SafeMsilClrSupport">
            <summary>
            Safe MSIL Common Language RunTime Support
            </summary>
            <remarks>
            Produces an MSIL-only (no native executable code) and verifiable output file.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.MultiProcessorCompilation">
            <summary>
            Multi-processor Compilation
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.Optimization">
            <summary>
            Select option for code optimization; choose Custom to use specific optimization options.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Optimization.Disable">
            <summary>
            Disable optimization.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Optimization.MinimizeSize">
            <summary>
            Maximum Optimization (Favor Size)
            </summary>
            <remarks>
            Equivalent to /Og /Os /Oy /Ob2 /Gs /GF /Gy
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Optimization.MaximizeSpeed">
            <summary>
            Maximum Optimization (Favor Speed)
            </summary>
            <remarks>
            Equivalent to /Og /Oi /Ot /Oy /Ob2 /Gs /GF /Gy
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Optimization.FullOptimization">
            <summary>
            Optimizations (Favor Speed)
            </summary>
            <remarks>
            Equivalent to /Og /Oi /Ot /Oy /Ob2
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.Inline">
            <summary>
            Inline Function Expansion
            </summary>
            <remarks>
            Select the level of inline function expansion for the build.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Inline.OnlyInline">
            <summary>
            Only __inline
            </summary>
            <remarks>
            Expands only functions marked as inline, __inline, __forceinline or __inline or, in a C++ member function, defined within a class declaration.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Inline.AnySuitable">
            <summary>
            Any Suitable
            </summary>
            <remarks>
            Expands functions marked as inline or __inline and any other function that the compiler chooses (expansion occurs at the compiler's discretion, often referred to as auto-inlining).
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Inline.Disable">
            <summary>
            Disables inline expansion, which is on by default.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.Intrinsic">
            <summary>
            Enable Intrinsic Functions
            </summary>
            <remarks>
            Using intrinsic functions generates faster, but possibly larger, code.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.FavorSizeOrSpeed">
            <summary>
            Favor Size Or Speed
            </summary>
            <remarks>
            Whether to favor code size or code speed; 'Global Optimization' must be turned on.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FavorSizeOrSpeed.Neither">
            <summary>
            No size nor speed optimization.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FavorSizeOrSpeed.FastCode">
            <summary>
            Favor Fast Code. Maximizes the speed of EXEs and DLLs by instructing the compiler to favor speed over size. (This is the default.)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FavorSizeOrSpeed.SmallCode">
            <summary>
            Favor Small Code. Minimizes the size of EXEs and DLLs by instructing the compiler to favor size over speed.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.OmitFramePointers">
            <summary>
            Omit Frame Pointers
            </summary>
            <remarks>
            Suppresses creation of frame pointers on the call stack.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.FiberSafe">
            <summary>
            Enable Fiber-Safe Optimizations
            </summary>
            <remarks>
            Enables memory space optimization when using fibers and thread local storage access.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.IgnoreStandardIncludePath">
            <summary>
            Ignore Standard Include Paths
            </summary>
            <remarks>
            Prevents the compiler from searching for include files in directories specified in the INCLUDE environment variables.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.GenerateProcessorFile">
            <summary>
            Preprocess to a File
            </summary>
            <remarks>
            Preprocesses C and C++ source files and writes the preprocessed output to a file. This option suppresses compilation, thus it does not produce an .obj file.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.GenerateProcessorFile.WithoutLineNumbers">
            <summary>
            Preprocess without #line directives.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.KeepComment">
            <summary>
            Suppresses comment strip from source code; requires that one of the 'Preprocessing' options be set.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.StringPooling">
            <summary>
            Enables the compiler to create a single read-only copy of identical strings in the program image and in memory during execution, resulting in smaller programs, an optimization called string pooling. /O1, /O2, and /ZI  automatically set /GF option.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.MinimalRebuild">
            <summary>
            Enables minimal rebuild, which determines whether C++ source files that include changed C++ class definitions (stored in header (.h) files) need to be recompiled.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.Exceptions">
            <summary>
            Enable C++ Exceptions
            </summary>
            <remarks>
            Specifies the model of exception handling to be used by the compiler.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Exceptions.Disable">
            <summary>
            No exception handling.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Exceptions.Enable">
            <summary>
            The exception-handling model that catches C++ exceptions only and tells the compiler to assume that extern C functions never throw a C++ exception. (/EHsc)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Exceptions.EnableWithExternC">
            <summary>
            The exception-handling model that catches C++ exceptions only and tells the compiler to assume that extern C functions do throw an exception. (/EHs)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.Exceptions.EnableWithSEH">
            <summary>
            The exception-handling model that catches asynchronous (structured) and synchronous (C++) exceptions. (/EHa)
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.TypeChecks">
            <summary>
            Smaller Type Check
            </summary>
            <remarks>
            Enable checking for conversion to smaller types, incompatible with any optimization type other than debug.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.RuntimeChecks">
            <summary>
            Perform basic runtime error checks, incompatible with any optimization type other than debug.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeChecks.StackFrames">
            <summary>
            Enables stack frame run-time error checking.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeChecks.UninitializedVariables">
            <summary>
            Reports when a variable is used without having been initialized.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeChecks.Both">
            <summary>
            Both (/RTC1, equiv. to /RTCsu)
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.RuntimeLibrary">
            <summary>
            Specify runtime library for linking.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeLibrary.MultiThreaded">
            <summary>
            Multi-threaded
            </summary>
            <remarks>
            Causes your application to use the multithread, static version of the run-time library.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeLibrary.MultiThreadedDebug">
            <summary>
            Multi-threaded Debug
            </summary>
            <remarks>
            Defines _DEBUG and _MT. This option also causes the compiler to place the library name LIBCMTD.lib into the .obj file so that the linker will use LIBCMTD.lib to resolve external symbols.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeLibrary.MultiThreadedDLL">
            <summary>
            Multi-threaded DLL
            </summary>
            <remarks>
            Causes your application to use the multithread- and DLL-specific version of the run-time library. Defines _MT and _DLL and causes the compiler to place the library name MSVCRT.lib into the .obj file.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.RuntimeLibrary.MultiThreadedDebugDLL">
            <summary>
            Multi-threaded Debug DLL
            </summary>
            <remarks>
            Defines _DEBUG, _MT, and _DLL and causes your application to use the debug multithread- and DLL-specific version of the run-time library. It also causes the compiler to place the library name MSVCRTD.lib into the .obj file.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.StructAlignment">
            <summary>
            Struct Member Alignment
            </summary>
            <remarks>
            Specifies 1, 2, 4, or 8-byte boundaries for struct member alignment.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Default">
            <summary>
            Default alignment settings.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Alignment1">
            <summary>
            1 Byte
            </summary>
            <remarks>
            Packs structures on 1-byte boundaries. Same as /Zp.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Alignment2">
            <summary>
            2 Bytes
            </summary>
            <remarks>
            Packs structures on 2-byte boundaries.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Alignment4">
            <summary>
            4 Byte
            </summary>
            <remarks>
            Packs structures on 4-byte boundaries.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Alignment8">
            <summary>
            8 Bytes
            </summary>
            <remarks>
            Packs structures on 8-byte boundaries (default).
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.StructAlignment.Alignment16">
            <summary>
            16 Bytes
            </summary>
            <remarks>
            Packs structures on 16-byte boundaries.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.BufferSecurityCheck">
            <summary>
            Security Check
            </summary>
            <remarks>
            The Security Check helps detect stack-buffer over-runs, a common attempted attack upon a program's security.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.BufferSecurityCheck.Disable">
            <summary>
            Disable Security Check. (/GS-)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.BufferSecurityCheck.Enable">
            <summary>
            Enable Security Check. (/GS)
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.FunctionLevelLinking">
            <summary>
            Enable Function-Level Linking
            </summary>
            <remarks>
            Allows the compiler to package individual functions in the form of packaged functions (COMDATs). Required for edit and continue to work.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet">
            <summary>
            Enable Enhanced Instruction Set
            </summary>
            <remarks>
            Enable use of instructions found on processors that support enhanced instruction sets, e.g., the SSE, SSE2, AVX, AVX2 and AVX-512 enhancements to IA-32; AVX, AVX2 and AVX-512 to x64. Currently /arch:SSE and /arch:SSE2 are only available when building for the x86 architecture. If no option is specified, the compiler will use instructions found on processors that support SSE2. Use of enhanced instructions can be disabled with /arch:IA32.   (/arch:SSE, /arch:SSE2, /arch:AVX, /arch:AVX2, /arch:AVX512, /arch:IA32)
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.Disable">
            <summary>
            Not Set
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.SIMD">
            <summary>
            Streaming SIMD Extensions. (/arch:SSE)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.SIMD2">
            <summary>
            Streaming SIMD Extensions 2. (/arch:SSE2)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.AdvancedVectorExtensions">
            <summary>
            Advanced Vector Extensions. (/arch:AVX)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.AdvancedVectorExtensions2">
            <summary>
            Advanced Vector Extensions 2. (/arch:AVX2)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.AdvancedVectorExtensions512">
            <summary>
            Advanced Vector Extensions 512. (/arch:AVX512)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.EnhancedInstructionSet.NoEnhancedInstructions">
            <summary>
            No Enhanced Instructions. (/arch:IA32)
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.FloatingPointModel">
            <summary>
            Floating Point Model
            </summary>
            <remarks>
            Sets the floating point model.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FloatingPointModel.Precise">
            <summary>
            Improves the consistency of floating-point tests for equality and inequality.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FloatingPointModel.Strict">
            <summary>
            The strictest floating-point model. /fp:strict causes fp_contract to be OFF and fenv_access to be ON. /fp:except is implied and can be disabled by explicitly specifying /fp:except-. When used with /fp:except-, /fp:strict enforces strict floating-point semantics but without respect for exceptional events.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.FloatingPointModel.Fast">
            <summary>
            Creates the fastest code in the majority of cases.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.FloatingPointExceptions">
            <summary>
            Enable Floating Point Exceptions
            </summary>
            <remarks>
            Reliable floating-point exception model. Exceptions will be raised immediately after they are triggered.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.CreateHotPatchableCode">
            <summary>
            Create Hotpatchable Image
            </summary>
            <remarks>
            When hotpatching is on, the compiler ensures that first instruction of each function is two bytes, which is required for hot patching.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.ConformanceMode">
            <summary>
            Conformance mode
            </summary>
            <remarks>
            Enables or suppresses conformance mode. (/permissive-, /permissive).
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.ConformanceMode.Disable">
            <summary>
            No
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.ConformanceMode.Enable">
            <summary>
            Yes
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.DisableLanguageExtensions">
            <summary>
            Disable Language Extensions
            </summary>
            <remarks>
            Suppresses or enables language extensions.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.RemoveUnreferencedCodeData">
            <summary>
            Remove unreferenced code and data
            </summary>
            <remarks>
            When specified, compiler no longer generates symbol information for unreferenced code and data.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.BuiltInWChartType">
            <summary>
            Treat WChar_t As Built in Type
            </summary>
            <remarks>
            When specified, the type wchar_t becomes a native type that maps to __wchar_t in the same way that short maps to __int16. /Zc:wchar_t is on by default.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.ForceLoopScope">
            <summary>
            Force Conformance in For Loop Scope
            </summary>
            <remarks>
            Used to implement standard C++ behavior for the for statement loops with Microsoft extensions (/Za, /Ze (Disable Language Extensions)). /Zc:forScope is on by default.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.RTTI">
            <summary>
            Enable Run-Time Type Information
            </summary>
            <remarks>
            Adds code for checking C++ object types at run time (runtime type information).
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.CallingConvention">
            <summary>
            Calling Convention
            </summary>
            <remarks>
            Select the default calling convention for your application (can be overridden by function).
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CallingConvention.cdecl">
            <summary>
            __cdecl
            </summary>
            <remarks>
            Specifies the __cdecl calling convention for all functions except C++ member functions and functions marked __stdcall or __fastcall.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CallingConvention.fastcall">
            <summary>
            __fastcall
            </summary>
            <remarks>
            Specifies the __fastcall calling convention for all functions except C++ member sfunctions and functions marked __cdecl or __stdcall. All __fastcall functions must have prototypes.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CallingConvention.stdcall">
            <summary>
            __stdcall
            </summary>
            <remarks>
            Specifies the __stdcall calling convention for all functions except C++ member functions and functions marked __cdecl or __fastcall. All __stdcall functions must have prototypes.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CallingConvention.vectorcall">
            <summary>
            __vectorcall
            </summary>
            <remarks>
            Specifies the __vectorcall calling convention for all functions except C++ member functions and functions marked __cdecl, __fastcall, or __stdcall. All __vectorcall functions must have prototypes.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.CompileAsWinRT">
            <summary>
            Consume Windows Runtime Extension
            </summary>
            <remarks>
            Consume the Windows Run Time languages extensions.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.ShowIncludes">
            <summary>
            Show Includes
            </summary>
            <remarks>
            Generates a list of include files with compiler output.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.CppLanguageStandard">
            <summary>
            C++ Language Standard
            </summary>
            <remarks>
            Determines the C++ language standard the compiler will enforce. It is recommended to use the latest version when possible. (/std:c++14, /std:c++17, /std:c++20, /std:c++latest)
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CppLanguageStandard.CPP14">
            <summary>
            ISO C++14 Standard
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CppLanguageStandard.CPP17">
            <summary>
            ISO C++17 Standard
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CppLanguageStandard.CPP20">
            <summary>
            ISO C++20 Standard
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CppLanguageStandard.Latest">
            <summary>
            Preview - Features from the Latest C++ Working Draft
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.CLanguageStandard">
            <summary>
            C Language Standard
            </summary>
            <remarks>
            Determines the C language standard the compiler will enforce. It is recommended to use the latest version when possible.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CLanguageStandard.Legacy">
            <summary>
            Default (Legacy MSVC)
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CLanguageStandard.C11">
            <summary>
            ISO C11 Standard
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.CLanguageStandard.C17">
            <summary>
            ISO C17 (2018) Standard
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.SupportJustMyCode">
            <summary>
            Support Just My Code Debugging
            </summary>
            <remarks>
            Adds supporting code for enabling Just My Code debugging in this compilation unit.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.SpectreMitigation">
            <summary>
            Spectre Mitigation
            </summary>
            <remarks>
            Spectre mitigations for CVE 2017-5753.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.SpectreMitigation.Spectre">
            <summary>
            Enable Spectre mitigation feature for CVE 2017-5753
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.SpectreMitigation.SpectreLoad">
            <summary>
            All Loads
            </summary>
            <remarks>
            Enable Spectre mitigations for all load instructions
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.SpectreMitigation.SpectreLoadCF">
            <summary>
            All Control Flow Loads
            </summary>
            <remarks>
            Enable Spectre mitigations for all control flow load instructions
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Compiler.SpectreMitigation.Disabled">
            <summary>
            Disabled
            </summary>
            <remarks>
            Not Set.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Compiler.EnableAsan">
            <summary>
            Enable Address Sanitizer
            </summary>
            <remarks>
            Compiles and links program with AddressSanitizer. Currently available for x86 and x64 builds.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Librarian.TreatLibWarningAsErrors">
            <summary>
            Treat Lib Warning As Errors
            </summary>
            <remarks>
            Causes no output file to be generated if lib generates a warning.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.ShowProgress">
            <summary>
            Show Progress
            </summary>
            <remarks>
            Prints Linker Progress Messages
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.NotSet">
            <summary>
            Not Set
            </summary>
            <remarks>
            No verbosity.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerbose">
            <summary>
            Display all progress messages
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerboseLib">
            <summary>
            For Libraries Searched
            </summary>
            <remarks>
            Displays progress messages indicating just the libraries searched.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerboseICF">
            <summary>
            About COMDAT folding during optimized linking
            </summary>
            <remarks>
            Displays information about COMDAT folding during optimized linking.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerboseREF">
            <summary>
            About data removed during optimized linking
            </summary>
            <remarks>
            Displays information about functions and data removed during optimized linking.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerboseSAFESEH">
            <summary>
            About Modules incompatible with SEH
            </summary>
            <remarks>
            Displays information about modoules incompatible with Safe Exception Handling.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ShowProgress.LinkVerboseCLR">
            <summary>
            About linker activity related to managed code
            </summary>
            <remarks>
            Display information about linker activity related to managed code.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.Incremental">
            <summary>
            Enable Incremental Linking
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.SuppressStartupBanner">
            <summary>
            Suppress Startup Banner
            </summary>
            <remarks>
            Prevents display of the copyright message and version number.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.LinkLibraryDependencies">
            <summary>
            Link Library Dependencies
            </summary>
            <remarks>
            Specifies whether or not library outputs from project dependencies are automatically linked in.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.IgnoreImportLibrary">
            <summary>
            Ignore Import Library
            </summary>
            <remarks>
            Specifies that the import library generated by this configuration should not be imported into dependent projects.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.UseLibraryDependencyInputs">
            <summary>
            Use Library Dependency Inputs
            </summary>
            <remarks>
            Specifies whether or not the inputs to the librarian tool are used rather than the library file itself when linking in library outputs of project dependencies.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.IgnoreAllDefaultLibraries">
            <summary>
            Ignore All Default Libraries
            </summary>
            <remarks>
            The /NODEFAULTLIB option tells the linker to remove one or more default libraries from the list of libraries it searches when resolving external references. 
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.GenerateManifest">
            <summary>
            Generate Manifest
            </summary>
            <remarks>
            Specifies that the linker should create a side-by-side manifest file.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.GenerateDebugInformation">
             <summary>
             Generate Debug Info
             </summary>
             <remarks>
             This option enables creation of debugging information for the .exe file or the DLL.
            
             Enable will write /DEBUG, and let MS linker decide to use FastLink or Full PDBs
               If you want to force DEBUG:FULL, set both GenerateDebugInformation
               and GenerateFullProgramDatabaseFile to Enable
             </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.GenerateDebugInformation.Enable">
            <summary>
            Generate Debug Information
            </summary>
            <remarks>
            Create a complete Program Database (PDB) ideal for distribution to Microsoft Symbol Server.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.GenerateDebugInformation.EnableFastLink">
            <summary>
            Generate Debug Information optimized for faster links
            </summary>
            <remarks>
            Produces a program database (PDB) ideal for edit-link-debug cycle.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.GenerateDebugInformation.Disable">
            <summary>
            No
            </summary>
            <remarks>
            Produces no debugging information.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.GenerateFullProgramDatabaseFile">
            <summary>
            Generate Full Program Database File
            </summary>
            <remarks>
            This option generates a full PDB from a partial PDB generated when /Debug:fastlink is specified. Full PDB allows sharing the binary and the PDB with others.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.GenerateMapFile">
            <summary>
            Generate Map File
            </summary>
            <remarks>
            The /MAP option tells the linker to create a mapfile.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.MapExports">
            <summary>
            Map Exports
            </summary>
            <remarks>
            The /MAPINFO option tells the linker to include the specified information in a mapfile, which is created if you specify the /MAP option. EXPORTS tells the linker to include exported functions.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.AssemblyDebug">
            <summary>
            Debuggable Assembly
            </summary>
            <remarks>
            /ASSEMBLYDEBUG emits the DebuggableAttribute attribute with debug information tracking and disables JIT optimizations.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.SubSystem">
            <summary>
            The /SUBSYSTEM option tells the operating system how to run the .exe file.The choice of subsystem affects the entry point symbol (or entry point function) that the linker will choose.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.NotSet">
            <summary>
            Not Set
            </summary>
            <remarks>
            No subsystem set.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.Console">
            <summary>
            Win32 character-mode application. Console applications are given a console by the operating system. If main or wmain is defined, CONSOLE is the default.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.Windows">
            <summary>
            Application does not require a console, probably because it creates its own windows for interaction with the user. If WinMain or wWinMain is defined, WINDOWS is the default.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.Native">
            <summary>
            Device drivers for Windows NT. If /DRIVER:WDM is specified, NATIVE is the default.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.EFI_Application">
            <summary>
            EFI Application.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.EFI_Boot_Service_Driver">
            <summary>
            EFI Boot Service Driver.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.EFI_ROM">
            <summary>
            EFI ROM.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.EFI_Runtime">
            <summary>
            EFI Runtime.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.SubSystem.POSIX">
            <summary>
            Application that runs with the POSIX subsystem in Windows NT.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.LargeAddress">
            <summary>
            Enable Large Addresses
            </summary>
            <remarks>
            The /LARGEADDRESSAWARE option tells the linker that the application can handle addresses larger than 2 gigabytes. By default, /LARGEADDRESSAWARE:NO is enabled if /LARGEADDRESSAWARE is not otherwise specified on the linker line.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.AllowIsolation">
            <summary>
            Allow Isolation
            </summary>
            <remarks>
            Specifies behavior for manifest lookup.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.Reference">
            <summary>
            References
            </summary>
            <remarks>
            EliminateUnreferencedData (/OPT:REF) eliminates functions and/or data that are never referenced while KeepUnreferencedData (/OPT:NOREF) keeps functions and/or data that are never referenced.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.EnableCOMDATFolding">
            <summary>
            Enable COMDAT Folding
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration">
            <summary>
            Link Time Code Generation
            </summary>
            <remarks>
            Specifies link-time code generation.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.Default">
            <summary>
            Default LTCG setting.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.UseFastLinkTimeCodeGeneration">
            <summary>
            Use Fast Link Time Code Generation
            </summary>
            <remarks>
            Use Link Time Code Generation.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.UseLinkTimeCodeGeneration">
            <summary>
            Use Link Time Code Generation
            </summary>
            <remarks>
            Use Link Time Code Generation.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.ProfileGuidedOptimizationInstrument">
            <summary>
            Profile Guided Optimization - Instrument
            </summary>
            <remarks>
            Specifies link-time code generation.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.ProfileGuidedOptimizationOptimize">
            <summary>
            Profile Guided Optimization - Optimization
            </summary>
            <remarks>
            Specifies that the linker should use the profile data created after running the instrumented binary to create an optimized image.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.LinkTimeCodeGeneration.ProfileGuidedOptimizationUpdate">
            <summary>
            Profile Guided Optimization - Update
            </summary>
            <remarks>
            Allows and tracks list of input files to be added or modified from what was specified in the :PGINSTRUMENT phase.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.RandomizedBaseAddress">
            <summary>
            Randomized Base Address
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.FixedBaseAddress">
            <summary>
            Fixed Base Address
            </summary>
            <remarks>
            Creates a program that can be loaded only at its preferred base address.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.CreateHotPatchableImage">
            <summary>
            Create Hot Patchable Image
            </summary>
            <remarks>
            Prepares an image for hotpatching.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.CreateHotPatchableImage.Enable">
            <summary>
            Prepares an image for hotpatching.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.CreateHotPatchableImage.X86Image">
            <summary>
            X86 Image Only
            </summary>
            <remarks>
            Prepares an X86 image for hotpatching.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.CreateHotPatchableImage.X64Image">
            <summary>
            X64 Image Only
            </summary>
            <remarks>
            Prepares an X64 image for hotpatching.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.CreateHotPatchableImage.ItaniumImage">
            <summary>
            Itanium Image Only
            </summary>
            <remarks>
            Prepares an Itanium image for hotpatching.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.ForceFileOutput">
            <summary>
            Force File Output
            </summary>
            <remarks>
            Tells the linker to create an .exe file or DLL even if a symbol is referenced but not defined or is multiply defined. It may create invalid exe file.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ForceFileOutput.Enable">
            <summary>
            /FORCE with no arguments implies both multiple and unresolved.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ForceFileOutput.MultiplyDefinedSymbolOnly">
            <summary>
            Multiply Defined Symbol Only
            </summary>
            <remarks>
            Use /FORCE:MULTIPLE to create an output file whether or not LINK finds more than one definition for a symbol.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.ForceFileOutput.UndefinedSymbolOnly">
            <summary>
            Undefined Symbol Only
            </summary>
            <remarks>
            Use /FORCE:UNRESOLVED to create an output file whether or not LINK finds an undefined symbol. /FORCE:UNRESOLVED is ignored if the entry point symbol is unresolved.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.GenerateWindowsMetadata">
            <summary>
            Generate Windows Metadata
            </summary>
            <remarks>
            Enables or disable generation of Windows Metadata.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.GenerateWindowsMetadata.Enable">
            <summary>
            Yes
            </summary>
            <remarks>
            Enable generation of Windows Metadata files.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.Linker.GenerateWindowsMetadata.Disable">
            <summary>
            No
            </summary>
            <remarks>
            Disable the generation of Windows Metadata files.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.Linker.TreatLinkerWarningAsErrors">
            <summary>
            Treat Linker Warning As Errors
            </summary>
            <remarks>
            Causes no output file to be generated if the linker generates a warning.
            </remarks>
        </member>
        <member name="T:Sharpmake.Options.Vc.SourceFile.PrecompiledHeader">
            <summary>
            Precompiled Header
            </summary>
            <remarks>
            Create/Use Precompiled Header : Enables creation or use of a precompiled header during the build.
            </remarks>
        </member>
        <member name="F:Sharpmake.Options.Vc.SourceFile.PrecompiledHeader.NotUsingPrecompiledHeaders">
            <summary>
            Not Using Precompiled Headers
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.SourceFile.PrecompiledHeader.CreatePrecompiledHeader">
            <summary>
            Instructs the compiler to create a precompiled header (.pch) file that represents the state of compilation at a certain point.
            </summary>
        </member>
        <member name="F:Sharpmake.Options.Vc.SourceFile.PrecompiledHeader.UsePrecompiledHeader">
            <summary>
            Instructs the compiler to use an existing precompiled header (.pch) file in the current compilation.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.LLVM.UseClangCl">
            <summary>
            Use clang-cl for compiling.  If this option is disabled, the Microsoft compiler (cl.exe) will be used instead.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.Vc.LLVM.UseLldLink">
            <summary>
            Use lld-link for linking.  If this option is disabled, the Microsoft linker (link.exe) will be used instead.
            </summary>
        </member>
        <member name="T:Sharpmake.Options.StringOption">
            <summary>
            Used to hold an option that has a string value
            A default value can be set by adding a `public static readonly string Default` field, ex:
                public static readonly string Default = "3.0";
            </summary>
        </member>
        <member name="T:Sharpmake.Options.PathOption">
            <summary>
            Used to hold an option that's a path, either to a file or directory, that's gonna be resolved
            </summary>
        </member>
        <member name="T:Sharpmake.Options.WithArgOption`1">
            <summary>
            Used to hold an option that has an untyped argument, could be another option
            </summary>
        </member>
        <member name="M:Sharpmake.Options.GetConfOption``1(System.Collections.Generic.IEnumerable{Sharpmake.Project.Configuration},System.String,System.String)">
            <summary>
            This method will retrieve a path option from all the configurations, ensuring it has the same value.
            If none of the configurations have the option, it will return the fallback value
            </summary>
            <typeparam name="T">The type of the option to lookup in the configurations.</typeparam>
            <param name="configurations">The list of configurations to look into.</param>
            <param name="fallback">Optional: Fallback value to return in case none of the configurations have the option.</param>
            <param name="rootpath">Optional: The rootpath to convert the path relative to.</param>
            <returns></returns>
        </member>
        <member name="M:Sharpmake.Options.GetOptionValue(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}},System.String)">
            <summary>
            This method will retrieve the values associated to a key in an enumerable of dictionaries,
            ensuring that the value is identical in all of them, or doesn't exist at all.
            If none of the dictionaries contain the key, it will return the fallback value
            </summary>
            <param name="key">The list of dictionaries to look into.</param>
            <param name="dictionaries">The list of dictionaries to look into.</param>
            <param name="fallback">Optional: Fallback value to return in case none of the dictionaries have the key.</param>
            <returns></returns>
        </member>
        <member name="F:Sharpmake.PackageReferences.TemplateBeginPackageReference">
            <remarks>
            See : https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets
            </remarks>
        </member>
        <member name="T:Sharpmake.PlatformImplementationAttribute">
            <summary>
            Marks a concrete class as an implementation of given interfaces for given platforms. This
            class must have a default constructor. Obviously, it also needs to actually implement the
            interface it pretends to!
            </summary>
        </member>
        <member name="P:Sharpmake.PlatformImplementationAttribute.Platforms">
            <summary>
            Gets the list of platforms that the object implements.
            </summary>
            <remarks>
            As <see cref="T:Sharpmake.Platform"/> is a bitfield, it is possible to specify multiple supported
            platforms.
            </remarks>
        </member>
        <member name="P:Sharpmake.PlatformImplementationAttribute.InterfaceTypes">
            <summary>
            Gets a collection of the <see cref="T:System.Type"/> of the interfaces that the object
            implements and exposes.
            </summary>
        </member>
        <member name="M:Sharpmake.PlatformImplementationAttribute.#ctor(Sharpmake.Platform,System.Type[])">
            <summary>
            Creates a new <see cref="T:Sharpmake.PlatformImplementationAttribute"/> instance.
            </summary>
            <param name="platform">The implemented platform.</param>
            <param name="ifaceTypes">An array that lists the <see cref="T:System.Type"/> of the interfaces that the object implements.</param>
        </member>
        <member name="T:Sharpmake.DefaultPlatformImplementationAttribute">
            <summary>
            Marks a concrete class as a default implementation of given interfaces. This class must
            have a default constructor. Obviously, it also needs to actually implement the interface it
            pretends to!
            </summary>
        </member>
        <member name="P:Sharpmake.DefaultPlatformImplementationAttribute.InterfaceTypes">
            <summary>
            Gets the <see cref="T:System.Type"/> of the implemented interface.
            </summary>
        </member>
        <member name="M:Sharpmake.DefaultPlatformImplementationAttribute.#ctor(System.Type[])">
            <summary>
            Creates a new <see cref="T:Sharpmake.PlatformImplementationAttribute"/> instance.
            </summary>
            <param name="ifaceTypes">An array that lists the <see cref="T:System.Type"/> of the interfaces that the object implements.</param>
        </member>
        <member name="T:Sharpmake.PlatformNotSupportedException">
            <summary>
            Exception thrown by <see cref="M:Sharpmake.PlatformRegistry.Get``1(Sharpmake.Platform)"/> when
            requesting an interface for an interface implementation that is not implemented for the
            requested platform and has no default implementation either.
            </summary>
        </member>
        <member name="T:Sharpmake.DuplicatePlatformImplementationException">
            <summary>
            Exception thrown when <see cref="T:Sharpmake.PlatformRegistry"/> finds two or more implementation of an
            interface for a given platform.
            </summary>
        </member>
        <member name="T:Sharpmake.PlatformImplementationCreationException">
            <summary>
            Exception thrown when <see cref="T:Sharpmake.PlatformRegistry"/> is unable to instantiate an interface
            implementation object. This is usually because the type has no constructor, or the
            constructor threw an exception.
            </summary>
        </member>
        <member name="T:Sharpmake.PlatformRegistry">
            <summary>
            Global registry that maps platform-specific implementations of interfaces with a concrete
            implementation. This facility allows to add and remove platform-specific generators without
            having to break any code.
            </summary>
            <remarks>
            This class searches for implementations using .NET reflection when the
            type is loaded by looking for types marked with <see cref="T:Sharpmake.PlatformImplementationAttribute"/>
            in assemblies marked with <see cref="T:Sharpmake.SharpmakeExtensionAttribute"/>. It may
            also store default implementations to fall-back to when it does not find any implementation
            for a requested platform and interface. Default implementations must be marked with
            <see cref="T:Sharpmake.DefaultPlatformImplementationAttribute"/>.
            </remarks>
        </member>
        <member name="E:Sharpmake.PlatformRegistry.PlatformImplementationExtensionRegistered">
            <summary>
            Occurs when an extension assembly containing platform implementations is loaded.
            </summary>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterExtensionAssembly(System.Reflection.Assembly)">
            <summary>
            Scans a Sharpmake extension assembly for the platform implementations, and then
            register those implementations.
            </summary>
            <param name="extensionAssembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="extensionAssembly"/> is `null`.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="extensionAssembly"/> was loaded in reflection-only.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="extensionAssembly"/> is a dynamically compiled assembly.</exception>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation(System.Type)">
            <summary>
            Registers a platform implementation given an implementation class.
            </summary>
            <param name="implType">The <see cref="T:System.Type"/> of the implementation class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="implType"/> is `null`.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="implType"/> does not have a default constructor, or is an abstract class or an interface.</exception>
            <remarks>
            This method will search through the <see cref="T:Sharpmake.PlatformImplementationAttribute"/> on
            <paramref name="implType"/> to find what platform/interface pairs to register.
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation(Sharpmake.Platform,System.Type,System.Type)">
            <summary>
            Registers a platform and an interface to a given implementation class.
            </summary>
            <param name="platform">The <see cref="T:Sharpmake.Platform"/> to register to.</param>
            <param name="ifaceType">The interface to register to.</param>
            <param name="implType">The <see cref="T:System.Type"/> of the implementing class. See remarks.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ifaceType"/> or <paramref name="implType"/> are `null`.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="implType"/> does not implement <paramref name="ifaceType"/>, or <paramref name="implType"/> does not have a default constructor, or <paramref name="implType"/> is an abstract class or an interface.</exception>
            <remarks>
            <para>
            This method ignores the attributes on <paramref name="implType"/> and registers it for
            <paramref name="platform"/> and <paramref name="ifaceType"/>.
            </para>
            <para>
            <paramref name="implType"/> must have a default constructor because this method will
            attempt to create an instance.
            </para>
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation(Sharpmake.Platform,System.Type,System.Object)">
            <summary>
            Registers a platform and an interface to an object that implements the interface.
            </summary>
            <param name="platform">The <see cref="T:Sharpmake.Platform"/> to register to.</param>
            <param name="ifaceType">The interface to register to.</param>
            <param name="implementation">An <see cref="T:System.Object"/> that implements <paramref name="ifaceType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ifaceType"/> or <paramref name="implementation"/> are `null`.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="implementation"/> does not implement <paramref name="ifaceType"/>.</exception>
            <remarks>
            This method ignores the attributes on <paramref name="implementation"/>'s
            <see cref="T:System.Type"/> and registers it for <paramref name="platform"/> and
            <paramref name="ifaceType"/>.
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation``1">
            <summary>
            Registers a platform implementation given an implementation class.
            </summary>
            <typeparam name="TImplementation">The type of the implementation class.</typeparam>
            <remarks>
            This method will search through the <see cref="T:Sharpmake.PlatformImplementationAttribute"/> on
            <typeparamref name="TImplementation"/> to find what platform/interface pairs to register.
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation``2(Sharpmake.Platform)">
            <summary>
            Registers a platform and an interface to a given implementation class.
            </summary>
            <typeparam name="TInterface">The interface to register to.</typeparam>
            <typeparam name="TImplementation">The type of the implementing class.</typeparam>
            <param name="platform">The <see cref="T:Sharpmake.Platform"/> to register to.</param>
            <remarks>
            This method ignores the attributes on <typeparamref name="TImplementation"/> and
            registers it for <paramref name="platform"/> and <typeparamref name="TInterface"/>.
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.RegisterImplementation``1(Sharpmake.Platform,``0)">
            <summary>
            Registers a platform and an interface to an object that implements the interface.
            </summary>
            <typeparam name="TInterface">The interface to register to.</typeparam>
            <param name="platform">The <see cref="T:Sharpmake.Platform"/> to register to.</param>
            <param name="implementation">A <typeparamref name="TInterface"/> that provides the implementation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="implementation"/> is `null`.</exception>
            <remarks>
            This method ignores the attributes on <paramref name="implementation"/>'s
            <see cref="T:System.Type"/> and registers it for <paramref name="platform"/> and
            <typeparamref name="TInterface"/>.
            </remarks>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.Has``1(Sharpmake.Platform)">
            <summary>
            Checks if the registry contains an implementation of a given interface for a given
            platform.
            </summary>
            <typeparam name="TInterface">The type of the interface needed.</typeparam>
            <param name="platform">The platform for which the interface must be implemented.</param>
            <returns>`true` if the interface is there, `false` otherwise.</returns>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.GetDefault``1">
            <summary>
            Gets the default implementation of a given interface. This is what is returned if an
            interface is not implemented for any platform.
            </summary>
            <typeparam name="TInterface">The type of the interface to get.</typeparam>
            <returns>The default interface, as a <typeparamref name="TInterface"/> instance.</returns>
            <exception cref="T:Sharpmake.PlatformNotSupportedException">There is no default implementation of <typeparamref name="TInterface"/>.</exception>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.QueryDefault``1">
            <summary>
            Gets the default implementation of a given interface if it has one. Does not throw if
            there is no default implementation.
            </summary>
            <typeparam name="TInterface">The type of the interface to get.</typeparam>
            <returns>The default interface, as a <typeparamref name="TInterface"/> instance, if such an interface exists. Returns `null` if there is no default interface.</returns>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.Get``1(Sharpmake.Platform)">
            <summary>
            Gets the implementation of a given interface for a given platform. If no implementation
            was defined for that platform, returns the default implementation instead, if one was
            defined.
            </summary>
            <typeparam name="TInterface">The type of the interface to get.</typeparam>
            <param name="platform">The platform whose implementation is requested.</param>
            <returns>The implementation of <typeparamref name="TInterface"/> for a given platform.</returns>
            <exception cref="T:Sharpmake.PlatformNotSupportedException">There is neither an implementation nor a default implementation of <typeparamref name="TInterface"/> for that platform.</exception>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.Query``1(Sharpmake.Platform)">
            <summary>
            Gets the implementation of a given interface for a given platform. If no implementation
            was defined for that platform, returns the default implementation instead, if one was
            defined. Does not throw an exception if no platform implementation is found.
            </summary>
            <typeparam name="TInterface">The type of the interface to get.</typeparam>
            <param name="platform">The platform whose implementation is requested.</param>
            <returns>The implementation of <typeparamref name="TInterface"/> for a given platform, or `null` if no such implementation or default implementation exists for that platform.</returns>
        </member>
        <member name="M:Sharpmake.PlatformRegistry.GetAvailablePlatforms``1">
            <summary>
            Gets the list of platforms for which a given interface is available.
            </summary>
            <typeparam name="TInterface">The type of the interface to check availability for.</typeparam>
            <returns>The collection of available platforms.</returns>
        </member>
        <member name="T:Sharpmake.IParsingFlowParser">
            <summary>
            IParsingFlowParser classes must also implement ISourceParser.
            Given the lines of a file, they can decide whether the other parsers should parse the current line or not. 
            </summary>
        </member>
        <member name="M:Sharpmake.IParsingFlowParser.ShouldParseLine">
            <summary>
            Returns true if the line should be parsed by the other source parsers.
            </summary>
        </member>
        <member name="M:Sharpmake.IParsingFlowParser.FileParsingBegin(System.String)">
            <summary>
            Called when a file is being parsed
            </summary>
        </member>
        <member name="M:Sharpmake.IParsingFlowParser.FileParsingEnd(System.String)">
            <summary>
            Called when a file is done being parsed
            </summary>
        </member>
        <member name="T:Sharpmake.PreprocessorConditionParser">
            <summary>
            The parsing flow parser that parses the #if, #elif, #else inside the Sharpmake files
            Depending if the current block is defined (lets say #if SYMBOL, where SYMBOL has been passed in the application's parameters)
            This parser is used to prevent parsing Includes and References from blocks are not defined.
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.State.NestedFileStates">
            <summary>
            All nested files analyzed
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.State.IsCurrentCodeBlockDefined">
            <summary>
            The current code block is defined if we are currently parsing a line that is inside a block where all nested conditions are defined.
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.FileState.FilePath">
            <summary>
            Current nested file path.
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.FileState.NestedConditionBlocks">
            <summary>
            All nested condition blocks parsed so far (#if inside #if)
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.FileState.IsCurrentCodeBlockDefined">
            <summary>
            The current code block is defined if we are currently parsing a line that is inside a block where all nested conditions are defined.
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.ConditionBlock.Resolved">
            <summary>
            Did at least one branch of the (if, elif, else) branches has been resolved (did we entered one of the block) ?
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.ConditionBlock.Defined">
            <summary>
            Is the current block of code being defined (condition evaluated as true) ?
            </summary>
        </member>
        <member name="P:Sharpmake.PreprocessorConditionParser.ConditionBlock.CurrentDefine">
            <summary>
            Name of the define being tested.
            </summary>
        </member>
        <member name="T:Sharpmake.DependencySetting">
            <summary>
            Options to specify the properties of the dependencies between projects. This is used with
            <see cref="M:Sharpmake.Project.Configuration.AddPublicDependency(Sharpmake.ITarget,System.Type,Sharpmake.DependencySetting,System.String,System.Int32)"/> and
            <see cref="M:Sharpmake.Project.Configuration.AddPrivateDependency(Sharpmake.ITarget,System.Type,Sharpmake.DependencySetting,System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.OnlyBuildOrder">
            <summary>
            The dependent project must be built after the dependency.
             Otherwise the two files have no dependencies.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.LibraryFiles">
            <summary>
            The dependent project inherits the library files of the dependency.
            Valid only when the project is a C or a C++ project.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.LibraryPaths">
            <summary>
            The dependent project inherits the library paths of the dependency.
            Valid only when the project is a C or a C++ project.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.IncludePaths">
            <summary>
            The dependent project inherits the include paths of the dependency.
            Valid only when the project is a C or a C++ project.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.Defines">
            <summary>
            The dependent project inherits the defined symbols of the dependency.
            Valid only when the project is a C or a C++ project.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.AdditionalUsingDirectories">
            <summary>
            The dependent project inherits the `using` paths of the dependency.
            Valid only if the project is a C# project and uses Microsoft C++/CX extensions .
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.Default">
            <summary>
            Specifies that the dependent project inherits the dependency's library files, library
            paths, include paths and defined symbols.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencySetting.DefaultWithoutLinking">
            <summary>
            Specifies that the dependent project inherits the dependency's include paths and
            defined symbols, but not it's library files or library paths. Use this for header-only
            C++ libraries.
            </summary>
        </member>
        <member name="T:Sharpmake.DependencyType">
            <summary>
            Visibility types for inter-project dependency relationships. This setting is
            usually only meaningful in cases where a library depends on another library because
            one of its executables has an end-point in the other's dependency graph.
            </summary>
        </member>
        <member name="F:Sharpmake.DependencyType.Private">
            <summary>
            Specifies that the dependency relationship is private. The dependent project will not
            expose the dependency's exported properties, such as it's include paths.
            </summary>
            <remarks>
            A library that has a private dependency relationship with another library will use that
            library internally when compiled but will not expose the private dependency's
            exported properties (library paths, include paths, etc.) when other projects link to
            it. For example, if library B has a private dependency on C and A wants to link to B,
            A will not inherit any of C's include paths, library paths, etc.
            </remarks>
        </member>
        <member name="F:Sharpmake.DependencyType.Public">
            <summary>
            Specifies that the dependency relationship is public. The dependent project will expose
            the dependency's exported properties as it's own.
            </summary>
            <remarks>
            A library that has a public dependency relationship with another library will expose
            that dependency's include paths, library paths, etc. to any project that has a public
            dependency on it. For example, if library B has a public dependency on C and A wants to
            link to B, A will inherit all of C's include paths, library paths, etc.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.Project.Configuration" -->
        <member name="T:Sharpmake.Project.Configuration.IConfigurationTasks">
            <summary>
            Interface for classes that implement platform-specific tasks for generating
            configurations. An implementation of this interface is required when generating
            for a platform.
            </summary>
            <remarks>
            Implementations can assume that they will only be called by Sharpmake, and that the
            arguments are sane (ex: <see cref="M:Sharpmake.Project.Configuration.IConfigurationTasks.SetupStaticLibraryPaths(Sharpmake.Project.Configuration,Sharpmake.DependencySetting,Sharpmake.Project.Configuration)"/> is passed valid (non-null)
            configurations).
            </remarks>
        </member>
        <member name="M:Sharpmake.Project.Configuration.IConfigurationTasks.SetupDynamicLibraryPaths(Sharpmake.Project.Configuration,Sharpmake.DependencySetting,Sharpmake.Project.Configuration)">
            <summary>
            Sets up the library paths when adding a dependency on a dynamic library.
            </summary>
            <param name="configuration">The <see cref="T:Sharpmake.Project.Configuration"/> instance on which
                   to set the paths.</param>
            <param name="dependencySetting">The <see cref="T:Sharpmake.DependencySetting"/> bitflags
                   that specify the properties of the dependency relationship.</param>
            <param name="dependency">The <see cref="T:Sharpmake.Project.Configuration"/> instance of the dependency.</param>
        </member>
        <member name="M:Sharpmake.Project.Configuration.IConfigurationTasks.SetupStaticLibraryPaths(Sharpmake.Project.Configuration,Sharpmake.DependencySetting,Sharpmake.Project.Configuration)">
            <summary>
            Sets up the library paths when adding a dependency on a static library.
            </summary>
            <param name="configuration">The <see cref="T:Sharpmake.Project.Configuration"/> instance on which to
                   set the paths.</param>
            <param name="dependencySetting">The <see cref="T:Sharpmake.DependencySetting"/> bitflags
                   that specify the properties of the dependency relationship.</param>
            <param name="dependency">The <see cref="T:Sharpmake.Project.Configuration"/> instance of the dependency.</param>
        </member>
        <member name="M:Sharpmake.Project.Configuration.IConfigurationTasks.GetDefaultOutputFullExtension(Sharpmake.Project.Configuration.OutputType)">
            <summary>
            Gets the default file extension for a given output type.
            </summary>
            <param name="outputType">The <see cref="T:Sharpmake.Project.Configuration.OutputType"/> whose default file extension we are seeking.</param>
            <returns>A string, containing the file extension (could be empty on some platforms, like exe on linux).</returns>
        </member>
        <member name="M:Sharpmake.Project.Configuration.IConfigurationTasks.GetOutputFileNamePrefix(Sharpmake.Project.Configuration.OutputType)">
            <summary>
            Gets the default file prefix for a given output type.
            </summary>
            <param name="outputType">The <see cref="T:Sharpmake.Project.Configuration.OutputType"/> whose default file prefix we are seeking.</param>
            <returns>A string, containing the file prefix (for instance lib on linux).</returns>
        </member>
        <member name="M:Sharpmake.Project.Configuration.IConfigurationTasks.GetPlatformLibraryPaths(Sharpmake.Project.Configuration)">
            <summary>
            Gets the library paths native to the specified configuration's platform.
            </summary>
            <param name="configuration">The <see cref="T:Sharpmake.Project.Configuration"/> to get the paths for.</param>
            <returns>A list of library paths for the specified configuration and platform.</returns>
        </member>
        <member name="P:Sharpmake.Project.Configuration.Count">
            <summary>
            Gets the number of generated <see cref="T:Sharpmake.Project.Configuration"/> instances.
            </summary>
        </member>
        <member name="M:Sharpmake.Project.Configuration.SimpleOutputType(Sharpmake.Project.Configuration.OutputType)">
            <summary>
            Maps the .NET <see cref="T:Sharpmake.Project.Configuration.OutputType"/> into its native counterpart.
            </summary>
            <param name="type">Specifies the <see cref="T:Sharpmake.Project.Configuration.OutputType"/> to map.</param>
            <returns> Returns the mapped <see cref="T:Sharpmake.Project.Configuration.OutputType"/> value.</returns>
            <remarks>
            This method maps values of <see cref="T:Sharpmake.Project.Configuration.OutputType"/> in the following way:
                * <see cref="F:Sharpmake.Project.Configuration.OutputType.DotNetConsoleApp"/> and <see cref="F:Sharpmake.Project.Configuration.OutputType.DotNetWindowsApp"/> are mapped to <see cref="F:Sharpmake.Project.Configuration.OutputType.Exe"/>.
                * <see cref="F:Sharpmake.Project.Configuration.OutputType.DotNetClassLibrary"/> is mapped to <see cref="F:Sharpmake.Project.Configuration.OutputType.Dll"/>.
                * Other values are mapped to themselves.
            </remarks>
        </member>
        <member name="T:Sharpmake.Project.Configuration.OutputType">
            <summary>
            Output types for the <see cref="T:Sharpmake.Project.Configuration"/>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.Exe">
            <summary>
            Output is an executable/>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.Lib">
            <summary>
            Output is a static library/>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.Dll">
            <summary>
            Output is a DLL(Dynamic Link library)/>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.Utility">
            <summary>
            The project does not produce any code. It is either a header-only library, or a
            utility project that is used as part of the build system but does not produce
            any code.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.DotNetConsoleApp">
            <summary>
            The output is an executable .NET program that opens a console window on
            startup. The extension is always <c>.exe</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.DotNetClassLibrary">
            <summary>
            The output is a .NET class library that can be added as a reference. The
            extension is always <c>.dll</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.DotNetWindowsApp">
            <summary>
            The output is an executable .NET program that does not display a console window
            on startup. The extension is always <c>.exe</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.IosApp">
            <summary>
            The output is an iOS app.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.IosTestBundle">
            <summary>
            The output is an iOS test bundle.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputType.None">
            <summary>
            Specifies no output. Do not use this.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.InputFileStrategy">
            <summary>
            Methods to list source files.
            </summary>
            <remarks>
            This is only used for FASTBuild generation.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.InputFileStrategy.Include">
            <summary>
            Explicitly refer to files in FASTBuild configuration files using file lists.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.InputFileStrategy.Exclude">
            <summary>
            Implicitly refer to files in FASTBuild configuration files using paths and
            exclusion file lists.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.DeoptimizationWritableFiles">
            <summary>
            FASTBuild deoptimization strategies for writable files.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DeoptimizationWritableFiles.NoDeoptimization">
            <summary>
            No deoptimization. This is the default.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DeoptimizationWritableFiles.DeoptimizeWritableFiles">
            <summary>
            Deoptimize all files with a writable flag on the file system.
            </summary>
            <remarks>
            This is useful when using Perforce, since files that have not been modified are
            typically read-only. That is, this option enables automatic deoptimization of modified files.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DeoptimizationWritableFiles.DeoptimizeWritableFilesWithToken">
            <summary>
            When the <c>FASTBUILD_DEOPTIMIZE_OBJECT</c> token is specified,
            deoptimize files with writable status.
            </summary>
            <remarks>
            This is useful when using Perforce, since files that have not been modified are
            typically read-only. That is, this enables automatic deoptimization of modified files.
            </remarks>
        </member>
        <member name="T:Sharpmake.Project.Configuration.UACExecutionLevel">
            <summary>
            When the output is an executable program, this lists the levels of privileges that
            it can require upon execution, using Windows' User Account Control (UAC.)
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.UACExecutionLevel.asInvoker">
            <summary>
            UAC Execution Level: as invoker.
            </summary>
            <remarks>
            Use the same privileges as the process that created the program.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.UACExecutionLevel.highestAvailable">
            <summary>
            UAC Execution Level: highest available.
            </summary>
            <remarks>
            Use the highest privileges available to the current user.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.UACExecutionLevel.requireAdministrator">
            <summary>
            UAC Execution Level: require administrator.
            </summary>
            <remarks>
            Always run with administrator privileges. This will usually open a UAC dialog
            box for the user.
            </remarks>
        </member>
        <member name="P:Sharpmake.Project.Configuration.Output">
            <summary>
            Gets or sets the output type of the current configuration, exe, lib or dll.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.OutputExtension">
            <summary>
            Gets or sets the project's output extension (ie: .dll, .self, .exe, .dlu).
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ExecuteTargetCopy">
            <summary>
            Gets or sets whether to copy output files to the output directory.
            </summary>
            <remarks>
            This setting is provided for libraries, because they are usually intermediate
            artifacts during the compilation process and do not need to be in the final output
            directory unless it's necessary.
            <para>
            The default is <c>false</c>. Setting this to <c>true</c> will force the generators
            to copy the library artifacts.
            </para>
            <para>
            If <see cref="P:Sharpmake.Project.Configuration.Output"/> is set to a value that corresponds to an executable program
            (ie: <see cref="F:Sharpmake.Project.Configuration.OutputType.Exe"/>), the generators disregard this property and
            always copy the results.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AllowOutputDllCopy">
            <summary>
            Gets or sets whether the configuration output dll file will be copied in the target path of the projects depending on it.
            </summary>
            <remarks>
            This setting only apply with <see cref="F:Sharpmake.Project.Configuration.OutputType.Dll"/>
            This setting is usefull for dlls that are dynamically loaded:
            The dll do not need to be put along the executable.
            <para>
            The default is <c>true</c>. Setting this to <c>false</c> will prevent the generators
            to copy the library artifact in the exe directory.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CopyLinkerPdbToDependentTargets">
            <summary>
            Gets or sets whether dependent projects will copy their dll debugging database to the
            target path of their dependency projects. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CopyCompilerPdbToDependentTargets">
            <summary>
            Gets or sets whether dependent projects will copy their debugging database to the
            target path of their dependency projects. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.TargetCopyCommandCreator">
            <summary>
            Command to execute <see cref="F:Sharpmake.Project.Configuration.TargetCopyFiles"/>.
            </summary>
            <param name="relativeSourcePath">The relative path to the files.</param>
            <param name="relativeTargetPath">The relative path to the target directory.</param>
            <param name="workingPath">The path to the working directory.</param>
            <returns>The mapped <see cref="T:Sharpmake.Project.Configuration.OutputType"/> value as a string.</returns>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ExportAdditionalLibrariesEvenForStaticLib">
            <summary>
            Setting this boolean to true forces Sharpmake to fill in the AD fields in the current static
            library project.
            </summary>
            <remarks>
            Since Sharpmake handles all dependencies, using an <c>AdditionalDependencies</c> field in
            your project is typically useless for static libraries. However, when dependents aren't
            generated by Sharpmake, (that is, when a .sln contains Sharpmake generated projects as static
            libraries as well as manually maintained dependent projects) this feature can be useful.
            <para>
            The default is <c>false</c>. Set this boolean to <c>true</c> to make Sharpmake fill in the fields
            for the current static library project.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ProjectName">
            <summary>
            Gets or sets the name of the project, as viewed by the configuration.
            </summary>
            <remarks>
            Under normal circumstances, you should not need to edit this property. The name of
            the project is set in <see cref="F:Sharpmake.Project.Configuration.Name"/> and this is the default value.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ProjectFileName">
            <summary>
            Gets or sets the file name for the generated project, without any file extension.
            (ex: `"MyProject"`)
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ProjectPath">
            <summary>
            Gets or sets the directory in which the project will be generated.
            </summary>
            <remarks>
            By default, this is set to the same directory that this Sharpmake script is running in.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AssemblyName">
            <summary>
            Gets or sets the name of the generated .NET assembly.
            </summary>
            <remarks>
            Ignored in projects that are not built on the .NET framework.
            </remarks>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ProjectFullFileName">
            <summary>
            Gets the full path of the project file, including the directory and the
            file name. This doesn't include the file extension which depends on
            the generator.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SolutionFolder">
            <summary>
            Gets or sets the solution folder that will hold the Visual Studio solution for this project.
            </summary>
            <remarks>
            Ignored unless building a Visual Studio project.
            <para>
            To place the project in a sub-directory, use a `/` as a directory separator.
            </para>
            </remarks>
        </member>
        <member name="M:Sharpmake.Project.Configuration.AddSolutionFolder(System.String,System.String)">
            <summary>
            Set the solution folder associated with a solution name
            </summary>
            <remarks>
            Ignored unless generating for Visual Studio
            This property allows to get the same project being in different folder dependeng on the solution name. Ex. In Engine.sln the project Physic is at root, while in Tools.sln it is in a Engine/ directory
            Use the property SolutionFolder if not found inside the dictionary.
            <para>
            To place the project in a sub-directory, use a `/` as a directory separator.
            </para>
            </remarks>
        </member>
        <member name="M:Sharpmake.Project.Configuration.GetSolutionFolder(System.String)">
            <summary>
            Gets the solution folder associated with a solution name.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.LinkerPdbSuffix">
            <summary>
            Gets or sets the suffix to use in <see cref="F:Sharpmake.Project.Configuration.LinkerPdbSuffix"/>.
            If unset, the pdb file names will be the target name with a suffix and the .pdb extension.
            </summary>
            <remarks>
            Always put a separate pdb for the compiler in the intermediate path to avoid
            conflicts with the one from the linker.
            This helps the following things:
            1. Makes the linker go faster
            2. Avoid pdbs for dlls and .exe(s) growing and growing at each link
            3. Makes incremental linking work better.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.LinkerPdbFilePath">
            <summary>
            Gets or sets the directory and file name of the Visual Studio *linker* PDB file,
            including the file extension.
            </summary>
            <remarks>
            Used only when generating a Visual Studio project.
            <para>
            The default value is:
            <c>[conf.TargetPath]/[conf.TargetFileFullName][conf.LinkerPdbSuffix].pdb</c>.
            </para>
            <para>
            Always put a separate PDB for the compiler in the intermediate path to avoid
            conflicts with the one from the linker.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CompilerPdbSuffix">
            <summary>
            Gets or sets the suffix to use in <see cref="F:Sharpmake.Project.Configuration.CompilerPdbFilePath"/>.
            </summary>
            <remarks>
            Provided only as a convenience as it is only used in the default
            value of <see cref="F:Sharpmake.Project.Configuration.CompilerPdbFilePath"/> to assign a suffix to the PDB. If you
            change <see cref="F:Sharpmake.Project.Configuration.CompilerPdbFilePath"/> so that it doesn't use this property,
            then it isn't used.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CompilerPdbFilePath">
            <summary>
            Gets or sets the directory and file name of the Visual Studio <i>compiler</i> PDB file,
            including the file extension.
            </summary>
            <remarks>
            Used only when generating a Visual Studio project.
            <para>
            The default value is
            <c>[conf.IntermediatePath]/[conf.TargetFileFullName][conf.CompilerPdbSuffix].pdb</c>.
            </para>
            <para>
            The default file name in <see cref="F:Sharpmake.Project.Configuration.CompilerPdbFilePath"/> in Sharpmake does not
            match its default file name in Visual Studio for compiler PDB, which is <c>VCx0.pdb</c>.
            See <externalLink>
            <linkText> /Fd (Program Database File Name)</linkText>
            <linkUri>https://msdn.microsoft.com/en-us/library/9wst99a9.aspx</linkUri>
            </externalLink>.
            If you mean to use Visual Studio's default value, you must set this property to <c>null</c>.
            </para>
            <para>
            Always put a separate PDB for the compiler in the intermediate path to avoid
            conflicts with the one from the linker.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.UseRelativePdbPath">
            <summary>
            Gets or sets whether <see cref="F:Sharpmake.Project.Configuration.CompilerPdbFilePath"/> and
            <see cref="F:Sharpmake.Project.Configuration.LinkerPdbFilePath"/> are relative.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ManifestFileSuffix">
            <summary>
            Gets or sets the suffix of the manifests when building a project that uses
            Microsoft's C++/CX with the build option *Embed Manifest*.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EmbeddedResourceOutputPrefix">
            <summary>
            Prefix for compiled embedded resource files
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IntermediatePath">
            <summary>
            Gets or sets the directory where the compiler will place the intermediate files.
            </summary>
            <remarks>
            This corresponds to the <i>Intermediate</i> directory in the Visual Studio project
            configuration.
            <para>
            The default value is <c>[conf.ProjectPath]/obj/[target.Platform]</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BaseIntermediateOutputPath">
            <summary>
            Base Intermediate devEnv directory. Only used in csproj
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.Defines">
            <summary>
            Gets the list of defined symbols to use when compiling the project.
            </summary>
            <remarks>
            Generators are allowed to add new symbols to this list when needed. For example,
            you don't need to explicitly add <c>_WIN32</c> to the list when building for Windows.
            <para>
            These symbols are defined during the compilation, not when the project is used as a library.
            The symbols that need to be defined when this project is being consumed as a
            library, must be added to <seealso cref="F:Sharpmake.Project.Configuration.ExportDefines"/> instead.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ExportDefines">
            <summary>
            Gets the list of symbols that are exported when the project is being used as a
            library.
            </summary>
            <remarks>
            Not used if the project is not a library.
            <para>
            The symbols defined in this list are not defined when building the library. You
            must define them in <seealso cref="F:Sharpmake.Project.Configuration.Defines"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesBuildExclude">
            <summary>
            Excludes the specified files from the build. Removes the files in this list from
            project.SourceFiles and matches project.SourceFilesRegex.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesBuildExcludeRegex">
            <summary>
            Gets a list of regular expressions that are used to filter matching source files
            out of the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesFiltersRegex">
            <summary>
            Gets a list of regular expressions that are used to filter matching source files
            into the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsCRegex">
            <summary>
            Source files that match this regex will be compiled as C Files.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsCPPRegex">
            <summary>
            Source files that match this regex will be compiled as CPP Files.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsCLRRegex">
            <summary>
            Source files that match this regex will be compiled as CLR Files.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsCLRExcludeRegex">
            <summary>
            Source files that match this regex will be excluded from the CLR Files list.
            Used on C++ projects rather than C++/CLI projects.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsNonCLRRegex">
            <summary>
            Source files that match this regex will be explicitly not compiled as CLR files.
            Used on C++/CLI projects to force certain files to be compiled without the <c>/clr</c> switch.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IncludePaths">
            <summary>
            Gets a list of include paths for compiling C and C++ projects.
            </summary>
            <remarks>
            If the project is a library, the include paths are imported in dependent
            projects. Use <see cref="F:Sharpmake.Project.Configuration.IncludePrivatePaths"/> if you need to use include paths
            that are only used to compile the library.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IncludePrivatePaths">
            <summary>
            Gets a list of include paths for compiling C and C++ libraries that are not
            shared with dependent projects.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Sharpmake.Project.Configuration.IncludeSystemPaths" -->
        <member name="F:Sharpmake.Project.Configuration.ResourceIncludePaths">
            <summary>
            Include paths for resource compilation.
            These paths will propagate via the IncludePaths DependencySetting, use ResourceIncludePrivatePaths if you want to avoid this
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.DependenciesResourceIncludePaths">
            <summary>
            Include paths for resource compilation.
            These paths are received from dependencies via the IncludePaths DependencySetting.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ResourceIncludePrivatePaths">
            <summary>
            Include paths for resource compilation.
            These paths will never propagate.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalCompilerOptions">
            <summary>
            Gets a list of compiler options to send when calling the compiler.
            </summary>
            <remarks>
            Generators are allowed to transform the textual representation of the options added
            here so that they work with the shell of the operating system or with the makefile
            format.
            <list type="bullet">
            <item>The values in this list are simply concatenated, separated with spaces, sanitized
            for the shell, and then appended directly to the command that calls the compiler.
            </item>
            <item>
            They are not translated from one compiler to the other. When you
            use this property, you need to know which C++ compiler you're using.
            </item>
            </list>
            <para>
            This property is for the compiler. Its counterpart for the linker is
            <see cref="F:Sharpmake.Project.Configuration.AdditionalLinkerOptions"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalCompilerOptionsOnPCHCreate">
            <summary>
            Compiler-specific options to pass when invoking the compiler to create PCHs.
            </summary>
            <remarks>
            Currently only respected by the BFF generator.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalCompilerOptionsOnPCHUse">
            <summary>
            Compiler-specific options to pass when invoking the compiler telling it to use PCHs.
            </summary>
            <remarks>
            Currently only respected by the BFF generator.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalNone">
            <summary>
            Gets a list of file extensions that are added to a Visual Studio project with the
            <b>None</b> build action.
            </summary>
            <remarks>
            Used only by the Visual Studio generators.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalDebuggerCommands">
            <summary>
            Adds commands for VS debugger
            </summary>
            <remarks>
            Used only by the Visual Studio generators.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompSource">
            <summary>
            Gets or sets the name of the source file for the precompiled header in C and C++
            projects, ie: <c>stdafx.cpp</c>. This property must be <c>null</c> for projects that don't
            have a precompiled header.
            </summary>
            <remarks>
            Both <see cref="F:Sharpmake.Project.Configuration.PrecompHeader"/> and <see cref="F:Sharpmake.Project.Configuration.PrecompSource"/> must be <c>null</c> if
            the project doesn't have precompiled headers.
            <para>
            Sharpmake assumes that a relative path here is relative to <see cref="P:Sharpmake.Project.SourceRootPath"/>.
            If that isn't correct, you must use an absolute path.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompHeader">
            <summary>
            Gets or sets the name of the precompiled header in C and C++ projects,
            ie: <c>stdafx.h</c>. This property must be <c>null</c> for projects that do not have a
            precompiled header.
            </summary>
            <remarks>
            Both <see cref="F:Sharpmake.Project.Configuration.PrecompHeader"/> and <see cref="F:Sharpmake.Project.Configuration.PrecompSource"/> must be <c>null</c> if
            the project doesn't have precompiled headers.
            <para>
            Sharpmake assumes that any relative path entered here is relative to
            <see cref="P:Sharpmake.Project.SourceRootPath"/>. If that isn't correct, you must use an absolute path.
            </para>
            <note>
            The source files must manually include this header or you will have
            compiler errors. Sharpmake merely tells the compiler to expect a precompiled
            header. The compiler doesn't implicitly include the header.
            </note>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompHeaderOutputFolder">
            <summary>
            Gets or sets the output directory for the precompiled header's binary file in C and C++
            projects.
            </summary>
            <remarks>
            If this property is set to <c>null</c>, Sharpmake will simply write the binary file to
            <see cref="F:Sharpmake.Project.Configuration.IntermediatePath"/>, the same as the object file.
            <para>
            If defined, precompiled headers are written to this directory instead of the intermediate directory.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompSourceExclude">
            <summary>
            Gets a list of files that don't use the precompiled headers.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompSourceExcludeExtension">
            <summary>
            Gets a list of file extensions that don't use the precompiled headers.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PrecompSourceExcludeFolders">
            <summary>
            Gets the list of directories that contain source files that don't use the
            precompiled headers.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ForcedIncludes">
            <summary>
            List of headers passed to the preprocessor to be parsed.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ConsumeWinRTExtensions">
            <summary>
            List of files that are built to consume WinRT Extensions.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesCompileAsWinRTRegex">
            <summary>
            Regex-based list of files that are built to consume WinRT Extensions.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ExcludeWinRTExtensions">
            <summary>
            List of files that are excluded from being built to consume WinRT Extensions.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesExcludeAsWinRTRegex">
            <summary>
            Regex-based list of files that are excluded from being built to consume WinRT Extensions.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabled">
            <summary>
            Gets a list of files that must be compiled using the compiler's default exception settings
            and with exceptions enabled.
            </summary>
            <remarks>
            If the source file is compiled with WinRT extensions, it is implicitly added to
            this list.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabledWithExternC">
            <summary>
            Gets a list of files that must be compiled with <c>extern C</c> exceptions enabled.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabledWithSEH">
            <summary>
            Gets a list of files that must be compiled with SEH exceptions enabled.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DumpDependencyGraph">
            <summary>
            Enables (true) or disables (false) a dump of the dependency graph for this configuration.
            </summary>
        </member>
        <member name="M:Sharpmake.Project.Configuration.AddSourceFileWithExceptionSetting(System.String,Sharpmake.Options.Vc.Compiler.Exceptions)">
            <summary>
            Adds a C or C++ source file with a specific exception setting.
            </summary>
            <param name="filename">The path of the source file.</param>
            <param name="exceptionSetting">The C++ exception setting.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="exceptionSetting"/> is not a known value.</exception>
            <exception cref="T:Sharpmake.Error"><paramref name="filename"/> has already been added with a different exception mode.</exception>
            <remarks>
            This is a utility method for selecting either
            <see cref="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabled"/>,
            <see cref="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabledWithExternC"/> or
            <see cref="F:Sharpmake.Project.Configuration.SourceFilesExceptionsEnabledWithSEH"/> and for making sure that the file has
            not already been included with another exception setting.
            </remarks>
        </member>
        <member name="M:Sharpmake.Project.Configuration.GetExceptionSettingForFile(System.String)">
            <summary>
            Gets which exception setting has been set for a given file in a C or C++ project.
            </summary>
            <param name="filename">The path of the file to examine.</param>
            <returns>A value from the <see cref="T:Sharpmake.Options.Vc.Compiler.Exceptions"/> enumerated type that specifies which exception mode is used for the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
        </member>
        <member name="F:Sharpmake.Project.Configuration.LibraryPaths">
            <summary>
            Gets a list of the search directories for static libraries.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.LibraryFiles">
            <summary>
            Gets a list of the static libraries to link to.
            </summary>
            <remarks>
            This should only be used for third party libraries that are not part of the compiled
            source code. Libraries that are part of the compiled source code should be included
            by calling either
            <see cref="M:Sharpmake.Project.Configuration.AddPublicDependency``1(Sharpmake.ITarget,Sharpmake.DependencySetting,System.String,System.Int32)"/>
            or <see cref="M:Sharpmake.Project.Configuration.AddPrivateDependency``1(Sharpmake.ITarget,Sharpmake.DependencySetting,System.String,System.Int32)"/>.
            This makes things much easier because Sharpmake will automatically take care
            of setting the library paths, library files, include paths, and build order
            according to the dependency graph.
            <para>
            Unless your library name contains a <c>.</c>(dot) in its file name, you don't need to add
            the file extension of any library you add here. If you do, Sharpmake will
            automatically remove it.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalUsingDirectories">
            <summary>
            Gets a list of "using" directories for compiling WinRT C++ extensions.
            </summary>
            <remarks>
            As WinRT is a Microsoft extension, this property is only used by the Visual Studio
            generators.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DotNetPublicDependencies">
            <summary>
            Gets the list of public dependencies for .NET projects.
            </summary>
            <remarks>
            You should use
            <see cref="M:Sharpmake.Project.Configuration.AddPublicDependency``1(Sharpmake.ITarget,Sharpmake.DependencySetting,System.String,System.Int32)"/>
            instead of adding elements directly into this list.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DotNetPrivateDependencies">
            <summary>
            Gets the list of private dependencies for .NET projects.
            </summary>
            <remarks>
            You should use
            <see cref="M:Sharpmake.Project.Configuration.AddPrivateDependency``1(Sharpmake.ITarget,Sharpmake.DependencySetting,System.String,System.Int32)"/>
            instead of adding elements directly to this list.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalLibrarianOptions">
            <summary>
            Options passed to the librarian / archiver
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.AdditionalLinkerOptions">
            <summary>
            Gets a list of linker options to send when calling the compiler.
            </summary>
            <remarks>
            Generators are allowed to transform the textual representation of the options added
            here so that they work with the operating system's shell or with the makefile
            format.
            <para>
            The values in this list are simply concatenated, separated with spaces, sanitized
            for the shell, and then appended directly to the command that calls the linker.
            </para>
            <para>
            The options added here are not translated from one linker to the other. When you
            use this property, you need to know which C++ compiler you're using.
            </para>
            <para>
            This property is for the linker. Its counterpart for the compiler is
            <see cref="F:Sharpmake.Project.Configuration.AdditionalCompilerOptions"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetPath">
            <summary>
            Target path, where the output files will be compiled, ex: exe, dll, self, xex
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CppCliExportsNativeLib">
            <summary>
            Gets or sets whether a .NET class library generates an import library instead of a
            managed assembly (DLL).
            </summary>
            <remark>
            This property has no effect unless <see cref="T:Sharpmake.Project.Configuration.OutputType"/> is set to
            <see cref="F:Sharpmake.Project.Configuration.OutputType.DotNetClassLibrary"/>.
            </remark>
        </member>
        <member name="F:Sharpmake.Project.Configuration.SkipFilterGeneration">
            <summary>
            Gets or sets whether to skip generating a Visual Studio filter file for this project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ModuleDefinitionFile">
            <summary>
            Gets or sets the path of the module definition file to be passed to the linker.
            </summary>
            <remarks>
            This is only used by the Visual Studio generators.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration._blobPath">
            <summary>
            Gets or sets the path where the blob files will be generated.
            </summary>
            <remarks>
            <note>
            FASTBuild supports blobbing via it's "unity" files and the FASTBuild
            generators use <see cref="P:Sharpmake.Project.Configuration.FastBuildUnityPath"/> to determine where to put the unity files.
            </note>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.GeneratableBlobCount">
            <summary>
            How many static blob files would this configuration generate
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.FastBuildUnityPath">
            <summary>
            Gets or sets the path of the unity files generated by the FASTBuild build system.
            </summary>
            <remarks>
            This property is only used when generating FASTBuild makefiles. When using the
            usual compiler, use <see cref="P:Sharpmake.Project.Configuration.BlobPath"/> to set the location of the blob files.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BlobWorkFileHeader">
            <summary>
            If specified, overrides <c>Project.DefaultBlobWorkFileHeader</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BlobWorkFileFooter">
            <summary>
            If specified, overrides <c>Project.DefaultBlobWorkFileFooter</c>.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BlobSize">
            <summary>
            If specified, overrides Project.BlobSize .
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.FastBuildUnityCount">
            <summary>
            Gets or sets the number of "unity" files to generate when using FASTBuild.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IncludeBlobbedSourceFiles">
            <summary>
            Gets or sets whether to include blobs in the project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildCustomActionsBeforeBuildCommand">
            <summary>
            Custom Actions to do before invoking FastBuildExecutable.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BffFileName">
            <summary>
            Gets or sets the name of the FASTBuild BFF file.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.BffFullFileName">
            <summary>
            Gets the full file path of the FASTBuild BFF file. This includes the directory and
            file name.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildUnityUseRelativePaths">
            <summary>
            Whether to use relative paths in FASTBuild-generated Unity files.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DoNotGenerateFastBuild">
            <summary>
            Gets or sets whether to generate a FASTBuild (.bff) file when using FASTBuild.
            </summary>
            <remarks>
            For projects merging multiple targets, sometimes what is wanted is to not generate FastBuild
             .bff files but, instead, include any existing .bff files from the appropriate targets.
            </remarks>
        </member>
        <member name="T:Sharpmake.Project.Configuration.BuildStepExecutable">
            <summary>
            Represents a build step that invokes an executable on the file system.
            </summary>
        </member>
        <member name="M:Sharpmake.Project.Configuration.BuildStepExecutable.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Sharpmake.Project.Configuration.BuildStepExecutable"/> instance.
            </summary>
            <param name="executableFile">The executable file.</param>
            <param name="executableInputFileArgumentOption">The command line option that specifies the input file.</param>
            <param name="executableOutputFileArgumentOption">The command line option that specifies the output file.</param>
            <param name="executableOtherArguments">Any other command line arguments to pass to the executable.</param>
            <param name="executableWorkingDirectory">The working directory of the executable.</param>
            <param name="isNameSpecific">???</param>
            <param name="useStdOutAsOutput">If `true`, the output is to *stdout*.</param>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.ExecutableFile">
            <summary>
            Gets or sets the name of the executable file.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.ExecutableInputFileArgumentOption">
            <summary>
            Gets or sets the command line option that specifies the input file.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.ExecutableOutputFileArgumentOption">
            <summary>
            Gets or sets the command line option that specifies the output file.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.ExecutableOtherArguments">
            <summary>
            Gets or sets any other command line option to pass to the executable.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.ExecutableWorkingDirectory">
            <summary>
            Gets or sets the working directory to use when calling the executable.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.FastBuildExecutableInputFiles">
            <summary>
            Sets multiple files as executable input. Only supported by Bff generator.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.FastBuildUseStdOutAsOutput">
            <summary>
            Gets or sets whether the output is to *stdout*.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BuildStepExecutable.FastBuildExecAlways">
            <summary>
            Gets or sets whether the step should be executed every time.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.NMakeBuildSettings">
            <summary>
            Settings for NMake projects with custom execution
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ObjectFileName">
            <summary>
            Specifies a function with a relative source file path as input and an object file path as output.
            </summary>
            <remarks>
            <note type="warning">
            This will slow down your project's compile time! Overwrite the object file output path
            only for the files that absolutely require it. Let the function return null or empty string
            to skip the overwrite for the given source file.
            <externalLink>
            <linkText>See a discussion of this in StackOverflow</linkText>
            <linkUri>http://stackoverflow.com/a/1999344</linkUri>
            </externalLink>.
            </note>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.Name">
            <summary>
            Gets or sets the name of the current configuration.
            </summary>
            <remarks>
            In Visual Studio, the name of the configuration is displayed in the drop-down list.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFileName">
            <summary>
            Gets or sets the base file name of the target.
            </summary>
            <remarks>
            Despite the name of the property, this is actually the base name. You can prepend
            and append suffixes using <see cref="F:Sharpmake.Project.Configuration.TargetFilePrefix"/> and
            <see cref="F:Sharpmake.Project.Configuration.TargetFileSuffix"/>.
            <para>
            The default value is the name of the project.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFileSuffix">
            <summary>
            Gets or sets the suffix to append to the target name.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFilePrefix">
            <summary>
            Gets or sets the prefix to prepend to the target name.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFilePlatformPrefix">
            <summary>
            Gets or set the platform dependent file prefix (for instance "lib" for libraries on linux).
            If left null, sharpmake will set it to the default for the platform
            according to the output type when the conf is resolved.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.TargetFileFullName">
            <summary>
            Gets the full file name of the target, without the path but with the prefix and suffix, and without the extension
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFileFullExtension">
            <summary>
            Gets or sets the project's full extension (ie: .dll, .self, .exe, .dlu).
            Set to an empty string you don't want any.
            If left null, sharpmake will set it to the default for the platform according to the output type, when the conf is resolved.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.TargetFileFullNameWithExtension">
            <summary>
            Gets the full file name of the target, without the path but with the suffix, and the extension
            and the prefix.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetFileOrderNumber">
            <summary>
            Gets or sets the ordering index of the target when added as a library to another
            project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetLibraryPathOrderNumber">
            <summary>
            Gets or sets the ordering index of the library paths when added as a library to
            another project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetCopyFiles">
            <summary>
            Gets or sets the list of files to copy to the output directory.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetCopyFilesPath">
            <summary>
            Target copy files path, where the TargetCopyFiles files will be copied
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetCopyFilesToSubDirectory">
            <summary>
            Gets or sets the list of files to copy to a sub-directory of the output directory.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.TargetDependsFiles">
            <summary>
            Gets or sets the list of files that the target depends on.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IsExcludedFromBuild">
            <summary>
            Gets or sets whether this configuration is included in or excluded from the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CopyDependenciesBuildStep">
            <summary>
            Gets or sets a custom <see cref="T:Sharpmake.Project.Configuration.FileCustomBuild"/> that is used to copy
            dependencies after a build.
            </summary>
            <remarks>
            This can be used to add a custom build tool on a dummy file to copy the
            dependencies' DLLs and PDBs. Works better than a PostBuildStep.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreBuild">
            <summary>
            Gets or sets a list of shell commands to add as a prebuild script.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreBuildDescription">
            <summary>
            Gets or sets the name of the prebuild script (that is written to the build
            output).
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreBuildExcludedFromBuild">
            <summary>
            Gets or sets whether the prebuild is excluded from the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreBuildExe">
            <summary>
            Gets or sets a list of <see cref="T:Sharpmake.Project.Configuration.BuildStepBase"/> instances that call executables
            at prebuild.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventCustomPreBuildExe">
            <summary>
            Gets or sets a list of <see cref="T:Sharpmake.Project.Configuration.BuildStepBase"/> instances that call executables
            at prebuild.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreLink">
            <summary>
            Gets or sets a list of shell commands to execute before linking a C or C++ project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreLinkDescription">
            <summary>
            Gets or sets a description to write to the build output before linking a C or C++
            project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPreLinkExcludedFromBuild">
            <summary>
            Gets or sets whether the pre-link is excluded from the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPrePostLink">
            <summary>
            Gets or sets a list of shell commands to execute after linking to a C or C++
            project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPrePostLinkDescription">
            <summary>
            Gets or sets a description to write to the build output after linking to a C or C++
            project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPrePostLinkExcludedFromBuild">
            <summary>
            Gets or sets whether the post-link is excluded from the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPostBuild">
            <summary>
            Gets or sets a list of shell commands to execute after building the project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPostBuildDescription">
            <summary>
            Gets or sets a description to write to the build output after building the
            project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.EventPostBuildExcludedFromBuild">
            <summary>
            Gets or sets whether the post-build is excluded from the build.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.CustomFileBuildStepData">
            <summary>
            This is all the data specific to a custom build step.
            The ones stored in the project configuration use absolute paths
            but we need relative paths when we're ready to export a specific
            project file.
            </summary>
        </member>
        <member name="T:Sharpmake.Project.Configuration.CustomFileBuildStepData.ProjectFilter">
            <summary>
            This lets us filter which type of project files should have this custom build step.
            This is specifically used to deal with the limitations of different build systems.
            </summary>
            <remarks>
            Visual studio only supports one build action per file, so if you need both compilation and
            some other build steps such as QT or Documentation generation on the same file, you need to put the rule
            on a different input file that also depends on the real input file.
            <para>
            FASTBuild is key based, not file based. So it can have two different operations on the same file.
            If you need support for FASTBuild, you can make two different custom build rules with one specific to BFF
            and the other excluding BFF.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.ProjectFilter.AllProjects">
            <summary>
            The custom build step is used for both project file and FASTBuild generation.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.ProjectFilter.ExcludeBFF">
            <summary>
            The custom build step excludes BFF.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.ProjectFilter.BFFOnly">
            <summary>
            The custom build step is specific to BFF
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.KeyInput">
            <summary>
            File custom builds are bound to a specific existing file. They run when the file is changed.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.Executable">
            <summary>
            This is the executable for the custom build step.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.ExecutableArguments">
            <summary>
            These are the arguments to pass to the executable.
            </summary>
            <remarks>
            We support [input] and [output] tags in the executable arguments that will auto-resolve to the relative
            paths to <see cref="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.KeyInput"/> and <see cref="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.Output"/>.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.Description">
            <summary>
            This is what will appear in the project file under "description". It's also the key used
            for FASTBuild, so it should be unique per build step if you want to use FASTBuild.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.Output">
            <summary>
            For FASTBuild compatibility, we can only have one input and one output per custom command.
            This is what we tell the build system we're going to produce.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.AdditionalInputs">
            <summary>
            Not supported by FASTBuild.
            Additional files that will cause a re-run of this custom build step can be be specified here.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildStepData.Filter">
            <summary>
            Specifies whether this step should run in builds for project files or FASTBuild or both.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.CustomFileBuildSteps">
            <summary>
            Specifies a list of custom build steps that will be executed when this configuration is active.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.StartWorkingDirectory">
            <summary>
            Gets or sets the working directory when a C# project is started from Visual Studio.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.XmlDocumentationFile">
             <summary>
             Defines where the compiler will generate an XML documentation file at compile time.
             </summary>
            
             The compiler generated XML file can be distributed alongside your .NET assembly so that
             Visual Studio and other IDEs can use IntelliSense to show quick information about types
             or members.
             Additionally, the XML file can be run through tools like DocFX and Sandcastle
             to generate API reference websites
            
             The following will output an XML file in the target directory with the same root filename as the assembly
            
                 conf.XmlDocumentationFile = @"[conf.TargetPath]\[project.AssemblyName].xml";
            
             <remarks>C# only</remarks>
        </member>
        <member name="P:Sharpmake.Project.Configuration.Project">
            <summary>
            Gets the <see cref="P:Sharpmake.Project.Configuration.Project"/> that this <see cref="T:Sharpmake.Project.Configuration"/>
            belongs to.
            </summary>
            <remarks>
            If this is a C# project, <see cref="P:Sharpmake.Project.Configuration.Project"/> can be safely cast to
            <see cref="T:Sharpmake.CSharpProject"/>.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DeployProject">
            <summary>
            Gets or sets whether this project is deployed.
            </summary>
            <remarks>
            This property only applies to Visual Studio projects.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IsBlobbed">
            <summary>
            Gets or sets whether blobbing is enabled for this configuration.
            </summary>
            <remarks>
            Blobbing is only used for C and C++ projects. FASTBuild uses it's own blobbing
            strategy (called unity files), which is enabled by setting FASTBuild properties.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.BlobFileDefine">
            <summary>
            Gets or sets the defined symbol that tells a C++ project that it is being built
            using a blobbing strategy.
            </summary>
            <remarks>
            Blobbing is only used for C and C++ projects. FASTBuild uses it's own blobbing
            strategy (called unity files), which is enabled by setting FASTBuild properties.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ApplicationPermissions">
            <summary>
            Gets or sets the Windows UAC permissions required to run the program.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ResourceFileDefine">
            <summary>
            Gets or sets the defined symbol that can be used from C and C++ projects to detect
            that a Windows resource file (.rc) is being used.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ExecutableFullExtension">
            <summary>
            Gets the file extension for executables.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.CompressedExecutableFullExtension">
            <summary>
            Gets the file extension for compressed executables, such as bundles, game packages
            for consoles, etc.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.DllFullExtension">
            <summary>
            Gets the file extension for shared libraries.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ProgramDatabaseFullExtension">
            <summary>
            Gets the file extension for program debug databases.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.IsFastBuild">
            <summary>
            Gets or sets whether FASTBuild will be used to build the project.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.FastBuildMasterBffList">
            <summary>
            List of the MasterBff files this project appears in.
            This is populated from the solution generator
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildBlobbed">
            <summary>
            Gets or sets whether FASTBuild blobs (unities) will be used in the build.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildDistribution">
            <summary>
            Gets or sets whether FASTBuild tasks will be distributed on the network.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildCacheAllowed">
            <summary>
            Gets or sets whether FASTBuild will use cached results to accelerate the build.
            </summary>
            <remarks>
            If caching is allowed, FASTBuild will use the value specified in
            <see cref="F:Sharpmake.FastBuildSettings.CacheType"/>.
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildBlobbingStrategy">
            <summary>
            Gets or sets the strategy to use to select files that are blobbed.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildNoBlobStrategy">
            <summary>
            Gets or sets the strategy to use to select files that are not blobbed.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildDeoptimization">
            <summary>
            Gets or sets the generic criteria by which files are deoptimized (compiled individually)
            by FASTBuild.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.FastBuildCustomArgs">
            <summary>
            Gets or sets custom command line arguments to pass to FASTBuild when building the
            project with this configuration.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.AddFastBuildProjectToSolutionCallback">
            <summary>
            Override this delegate with a method returning a bool letting sharpmake know if it needs to add the
            project containing this FastBuild conf to the solution.
            By default, sharpmake will only add it if the Output is executable, or if <see cref="F:Sharpmake.Project.Configuration.VcxprojUserFile"/>
            is not null.
            </summary>
        </member>
        <member name="M:Sharpmake.Project.Configuration.DefaultAddFastBuildProjectToSolution">
            <summary>
            Default method returning whether sharpmake will add the project containing this FastBuild conf to the solution
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ResolvedTargetCopyFiles">
            <summary>
            Gets the list of resolved files to copy.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ResolvedTargetCopyFilesToSubDirectory">
            <summary>
            Gets the list of resolved files to copy to a sub directory of the target directory.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ResolvedTargetDependsFiles">
            <summary>
            Gets the list of resolved dependency files.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ResolvedEventPreBuildExe">
            <summary>
            Gets the list of resolved pre-build executables.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ResolvedEventPostBuildExe">
            <summary>
            Gets the list of resolved post-build executables.
            </summary>
        </member>
        <member name="P:Sharpmake.Project.Configuration.ProjectGuid">
            <summary>
            Gets or sets the GUID of the Visual Studio project.
            </summary>
            <remarks>
            This is only relevant to Visual Studio generators.
            <para>
            This property coerces any value set to it to use an uppercase
            `00000000-0000-0000-0000-000000000000` format for the GUID.
            </para>
            </remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.ProjectFullFileNameWithExtension">
            <summary>
            Gets or sets the full file name of the project.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.PreferRelativePaths">
            <summary>
            Generate relative paths in places where it would be otherwise beneficial to use absolute paths.
            </summary>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DotNetOSVersion">
            <summary>
            Configuration OS version if not defined as Target fragment.
            </summary>
            <remarks>This allow adding OS version to specific DotNetFramework during configuration without altering Target's matching system</remarks>
        </member>
        <member name="F:Sharpmake.Project.Configuration.DotNetOSVersionSuffix">
            <summary>
            Optional OS version at the end of the TargetFramework, for example, net5.0-ios13.0.
            </summary>
            <remarks>C# only, will throw if the target doesn't have a non-default DotNetOS fragment</remarks>
        </member>
        <member name="M:Sharpmake.Project.Configuration.GetDependencySetting(System.Type)">
            <summary>
            Gets the dependency settings configuration for the given project type of this configuration.
            </summary>
            <param name="projectType"> The project type.</param>
            <returns>The specified project's dependency settings with related flags activated.
            </returns>
        </member>
        <member name="M:Sharpmake.Project.Configuration.ProjectReferencesByPathContainer.Add(System.String,System.Guid,Sharpmake.Project.Configuration.ProjectReferencesByPathContainer.RefOptions,System.Guid)">
            <summary>
            Adds a new ProjectReferencesByPath path, with optionally the guid.
            Adding the guid allows to set the reference without opening the project.
            </summary>
            <param name="projectFilePath">The project file path</param>
            <param name="projectGuid">An optional project guid</param>
            <param name="refOptions">Reference options</param>
            <param name="projectTypeGuid">An optional project type guid, one member of ProjectTypeGuids. Deduced from file extension if not provided.</param>
        </member>
        <member name="M:Sharpmake.Project.XResourcesImgContainer.Add(System.String,System.String)">
            <summary>
            Adds a new XResourcesImg path, with an optional link
            </summary>
            <param name="path">The path</param>
            <param name="link">An optional link</param>
        </member>
        <member name="F:Sharpmake.Project.ContainsASM">
            maps relative source directory to a custom filter path for vcxproj.filter files
        </member>
        <member name="P:Sharpmake.Project.BlobFixCasing">
            <summary>
            This property controls the casing of includes within the generated blob files.
            If true, the case will be fixed. Default is false.
            </summary>
        </member>
        <member name="M:Sharpmake.Project.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Special constructor for utility projects generated internally,
            since these projects must handle paths differently
            </summary>
            <param name="targetType"></param>
            <param name="configurationType"></param>
            <param name="isInternal">Indicates if the class is defined within Sharpmake</param>
        </member>
        <member name="M:Sharpmake.Project.PreConfigure">
            <summary>
            Called before configuration
            </summary>
        </member>
        <member name="M:Sharpmake.Project.IsValidConfigurationOutputType(Sharpmake.Project.Configuration.OutputType)">
            <summary>
            Validate that a configuration output type is supported by the current project type.
            </summary>
            <param name="outputType">The configuration output type to validate.</param>
            <returns>Returns true if the current project type supports the specified output type, otherwise false.</returns>
        </member>
        <member name="F:Sharpmake.CSharpProject.ExplicitNugetRestoreProjectStyle">
            <summary>
            If set to true. Will explicit the RestoreProjectStyle in the project file
            </summary>
        </member>
        <member name="P:Sharpmake.CSharpProject.EnableDefaultItems">
            <summary>
            Enable or disable the property [EnableDefaultItems] in NetCore Project Schema
            </summary>
        </member>
        <member name="F:Sharpmake.CSharpProject.GenerateDocumentationFile">
            <summary>
            Generate a file containing API documentation.
            </summary>
        </member>
        <member name="T:Sharpmake.AndroidPackageProject">
            <summary>
            A package project for deployment on Android device.
            </summary>
        </member>
        <member name="P:Sharpmake.AndroidPackageProject.AppLibType">
            <summary>
            The project type to lookup in the dependencies of the package to be used as the application library.
            This library is the first to be loaded when the package is started.
            </summary>
            <remarks>
            It is an error if the specified type can't be found in the configuration dependencies.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.ReferenceAlias`1" -->
        <member name="T:Sharpmake.ReferenceAliasAttribute">
            <summary>
            Enum value on attribute used to define reference alias
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.ReferenceAliasInitAttribute" -->
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.ReferenceAliasInitMethodAttribute" -->
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.ReferenceAliasManager`1" -->
        <member name="M:Sharpmake.ReferenceAliasManager`1.AddReference(`0,Sharpmake.Project.Configuration,Sharpmake.ITarget,Sharpmake.Project)">
            <summary>
            Main AddReference method called by extensions. 
            This one is using aliasValue and call the proper add reference for sharpmake projet
            </summary>
            <param name="aliasValue"></param>
            <param name="conf"></param>
            <param name="target"></param>
            <param name="project"></param>
        </member>
        <member name="T:Sharpmake.ReferenceAliasForwardManager`2">
            <summary>
            Helper ReferenceAliasManager that allow to forward AddReference from one enum type to another, based on enum value name matching
            This is used to match a publicly exposed enum to a private enum definition for example.
            </summary>
            <typeparam name="T">Source enum type</typeparam>
            <typeparam name="TDest">Destination enum type</typeparam>
        </member>
        <member name="T:Sharpmake.ReferenceAliasExtensions">
            <summary>
            Those extensions will let you use AddReference on conf object in your Configure
            ex : 
                conf.AddReferences(MyEnum.Lib1, MyEnum.Lib2);
                conf.AddReference(MyEnum.Lib3, target, project);
            </summary>
        </member>
        <member name="M:Sharpmake.RegexMatchCache.#ctor(System.Int32)">
            <param name="capacity">Initial cache capacity. Should not be divisible by a small prime number. Justification here: https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.-ctor?view=netcore-3.1. /// </param>
        </member>
        <member name="M:Sharpmake.GlobalRegexMatchCache.Init(System.Int32)">
            <param name="capacity">Initial cache capacity. Should not be divisible by a small prime number. Justification here: https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.-ctor?view=netcore-3.1. /// </param>
        </member>
        <member name="P:Sharpmake.GlobalRegexMatchCache.Count">
            <summary>
            Returns size of cache ( i.e. the number of elements in the cache ).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Sharpmake.Resolver" -->
        <member name="T:Sharpmake.SharpmakeExtensionAttribute">
            <summary>
            Marks a .NET assembly as a host of Sharpmake extension types (platform implementations for Sharpmake generators, builder...).
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.s_count">
            <summary>
            Gets the number of <see cref="T:Sharpmake.Solution.Configuration"/> instances created so far during
            Sharpmake's execution.
            </summary>
        </member>
        <member name="M:Sharpmake.Solution.Configuration.#ctor">
            <summary>
            Creates a new <see cref="T:Sharpmake.Solution.Configuration"/> instance.
            </summary>
        </member>
        <member name="P:Sharpmake.Solution.Configuration.Solution">
            <summary>
            Gets the <see cref="P:Sharpmake.Solution.Configuration.Solution"/> instance that owns this configuration.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.Name">
            <summary>
            Name of this solution configuration.
            </summary>
            <remarks>
            This name will be displayed in Visual Studio's configuration drop down list. (Or
            other development tools that support multiple configuration per workspace.)
            </remarks>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.SolutionFileName">
            <summary>
            File name (without extension) of the solution that this
            configuration must be written into.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.SolutionPath">
            <summary>
            Directory of the solution that this configuration must be written into.
            </summary>
        </member>
        <member name="P:Sharpmake.Solution.Configuration.SolutionFilePath">
            <summary>
            Gets the file name (without extension) of the solution that this configuration must
            be written info.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.MasterBffFileName">
            <summary>
            File name (without extension) of the master BFF for this solution configuration.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.MasterBffDirectory">
            <summary>
            Directory of the master BFF for this solution configuration.
            </summary>
        </member>
        <member name="P:Sharpmake.Solution.Configuration.MasterBffFilePath">
            <summary>
            Gets the file path (without extension) of the master BFF for this solution
            configuration.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.IncludeOnlyNeededFastBuildProjects">
            <summary>
            Experimental: only add to the solution the FastBuild projects that are really needed, or where
            <see cref="P:Sharpmake.Project.Configuration.AddFastBuildProjectToSolutionCallback"/> returned true.
            Set to false to add all of them.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.Configuration.IncludedProjectInfo.SolutionFolder">
            <summary>
            The solution folder to use for the project in this solution. It overrides <see cref="F:Sharpmake.Project.Configuration.SolutionFolder"/>
            </summary>
        </member>
        <member name="P:Sharpmake.Solution.Configuration.ProjectReferencesByPath">
            <summary>
            Holds the path references to projects that should be added in the solution
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.GenerateFastBuildAllProject">
            <summary>
            Allow to multi-thread the build of the executables when doing a Build Solution (Ctrl+Shift+B).
            However, it will not be possible to build each executable individually.
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.GenerateFastBuildAllOnlyForConfThatNeedIt">
            <summary>
            In case we've generated a "FastBuildAll" project, this flag will determine if we generate it for all
            the configurations, or only the ones that need it
            </summary>
        </member>
        <member name="F:Sharpmake.Solution.ExtraItems">
            <summary>
            For adding additional files/folders to the solution
            Keys are names of the directories in the virtual solution hierarchy, values are paths
            </summary>
        </member>
        <member name="T:Sharpmake.ISourceParser">
            <summary>
            ISourceParser classes are tasked with parsing lines in a file.
            They can add Sharpmake references through the AssemblerContext.
            </summary>
        </member>
        <member name="M:Sharpmake.ISourceParser.ParseLine(System.String,System.IO.FileInfo,System.Int32,Sharpmake.IAssemblerContext)">
            <summary>
            Parse the current line of the file and update the context if necessary. Parsers MUST NOT assume that the lines will be parsed sequentially.
            </summary>
        </member>
        <member name="T:Sharpmake.ISourceAttributeParser">
            <summary>
            A parser that parses C# Attributes, eg [Sharpmake.Include(...)]
            </summary>
        </member>
        <member name="T:Sharpmake.OrderableStrings">
            <summary>
            Same as Strings but support to specify additionally an order number for every entry.
            Every entry has by default the value 0.  Putting negative values will result in the entries
            to be first after a sort, putting positive will result in the entries to be last after a
            sort.  Order numbers are kept when copying container to another OrderableStrings.
            It is forbidden to specify 2 different non-zero order numbers for the exact same string
            in 2 merged together OrderableStrings.
            </summary>
        </member>
        <member name="M:Sharpmake.OrderableStrings.IntersectWith(System.Collections.Generic.IEnumerable{System.String},Sharpmake.Strings)">
            <param name="collection">The collection to intersect with</param>
            <param name="rest">Contains elements in both containers that are did not intersect</param>
        </member>
        <member name="T:Sharpmake.DevEnv">
            <summary>
            The development environments supported by Sharpmake generators.
            </summary>
            <remarks>
            This fragment is mandatory in every target.
            </remarks>
        </member>
        <member name="F:Sharpmake.DevEnv.vs2015">
            <summary>
            Visual Studio 2015
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.vs2017">
            <summary>
            Visual Studio 2017
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.vs2019">
            <summary>
            Visual Studio 2019
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.vs2022">
            <summary>
            Visual Studio 2022
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.xcode4ios">
            <summary>
            iOS project with Xcode.
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.eclipse">
            <summary>
            Eclipse.
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.make">
            <summary>
            GNU Makefiles.
            </summary>
        </member>
        <member name="F:Sharpmake.DevEnv.VisualStudio">
            <summary>
            All supported Visual Studio versions.
            </summary>
        </member>
        <member name="M:Sharpmake.Targets.ClearFragmentMasks">
            <summary>
            This method will remove all the masks that were added, if any
            </summary>
        </member>
        <member name="M:Sharpmake.Targets.SetGlobalFragmentMask(System.Object[])">
            <summary>
            The global fragment mask will add the mask or and it with previously existing masks
            </summary>
            <param name="masks"></param>
        </member>
        <member name="T:Sharpmake.UniqueList`1">
            <summary>
            Same as Strings with configurable type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sharpmake.UniqueList`1.IntersectWith(Sharpmake.UniqueList{`0},Sharpmake.UniqueList{`0})">
            <param name="otherList">the other container to intersect with</param>
            <param name="rest">Contains elements in both containers that are did not intersect</param>
        </member>
        <member name="T:Sharpmake.VariableAssignment">
            <summary>
            Simple class that wraps a variable name and it's assigned value.
            </summary>
        </member>
        <member name="P:Sharpmake.VariableAssignment.Identifier">
            <summary>
            Gets the name of the variable or parameter to assign the value to.
            </summary>
        </member>
        <member name="P:Sharpmake.VariableAssignment.Value">
            <summary>
            Gets the value to assign.
            </summary>
        </member>
        <member name="M:Sharpmake.VariableAssignment.#ctor(System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Sharpmake.VariableAssignment"/> instance.
            </summary>
            <param name="identifier">The name of the variable or parameter to assign.</param>
            <param name="value">The value to assign to <paramref name="identifier"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="identifier"/> is `null`.</exception>
        </member>
    </members>
</doc>
