// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CGFCodeGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CGFCodeGenerator;
    using CGFCodeGenerator.Core;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CGFInlineCodeGenerator : CGFInlineCodeGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("////////////////////////////////////////////////////////////////////\r\n// This fil" +
                    "e is auto generated. \r\n// *Any modifications to this file will be lost.*\r\n//////" +
                    "//////////////////////////////////////////////////////////////\r\n\r\n");
            
            #line 13 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

    CGFDocument cgfDocument = CGFDocument;

	foreach(CGFTypeSymbol cgfTypeSymbol in cgfDocument.Types)
	{
		CGFAttributeDataList typeAttributes = cgfTypeSymbol.Attributes;
		SerializeAttribute typeSerializeAttribute = typeAttributes.GetAttribute<SerializeAttribute>();
		if (typeSerializeAttribute != null)
			continue;

		if (cgfTypeSymbol.IsEnum)
			continue;

		bool isFrameData = typeAttributes.GetAttribute<FrameDataAttribute>() != null;
		bool isGlobalData = typeAttributes.GetAttribute<GlobalDataAttribute>() != null;
		bool isGlobalOrFrameData = isFrameData || isGlobalData;

            
            #line default
            #line hidden
            this.Write("std::istream& operator>>(std::istream& inputStream, ");
            
            #line 30 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cgfTypeSymbol.Name));
            
            #line default
            #line hidden
            this.Write("& ");
            
            #line 30 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cgfTypeSymbol.VariableName));
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n");
            
            #line 32 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

	    foreach(CGFFieldSymbol cgfFieldSymbol in cgfTypeSymbol.Fields)
	    {
			CGFAttributeDataList fieldAttributes = cgfFieldSymbol.Attributes;

            string cppType = CGFParserUtils.GetCPPStringForType(cgfFieldSymbol.TypeName);
            string variableName = cgfTypeSymbol.VariableName + "." + cgfFieldSymbol.Name;

			bool isFirstField = cgfTypeSymbol.Fields[0] == cgfFieldSymbol;
            bool isLastField = cgfTypeSymbol.Fields[cgfTypeSymbol.Fields.Count - 1] == cgfFieldSymbol;
	
			bool isStandaloneFieldType = false;
			if (cgfFieldSymbol.TypeSymbol != null)
			{
				SerializeAttribute fieldTypeSerializeAttribute = cgfFieldSymbol.TypeSymbol.Attributes.GetAttribute<SerializeAttribute>();
				isStandaloneFieldType = fieldTypeSerializeAttribute != null && fieldTypeSerializeAttribute.Flags == SerializeFlags.CallbackFullLine;
			}
            bool appendWithIgnore = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || !isLastField);

			FixedSizeArrayAttribute fieldFixedSizeArrayAttribute = fieldAttributes.GetAttribute<FixedSizeArrayAttribute>();
			VariableSizeArrayAttribute fieldVariableSizeArrayAttribute = fieldAttributes.GetAttribute<VariableSizeArrayAttribute>();
            if (fieldFixedSizeArrayAttribute != null || fieldVariableSizeArrayAttribute != null)
            {
                string arraySizeVariableName;
                if (fieldFixedSizeArrayAttribute != null)
                {
                    arraySizeVariableName = fieldFixedSizeArrayAttribute.ArraySize.ToString();
                }
                else
                {
                    arraySizeVariableName = cgfTypeSymbol.VariableName + "." + fieldVariableSizeArrayAttribute.ArraySizeFieldName;
                }
                    
                if (fieldVariableSizeArrayAttribute != null)
                {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 68 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".resize(");
            
            #line 68 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arraySizeVariableName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 69 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

                }

            
            #line default
            #line hidden
            this.Write("    for(int i = 0; i < ");
            
            #line 72 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arraySizeVariableName));
            
            #line default
            #line hidden
            this.Write("; ++i)\r\n    {\r\n        inputStream >> ");
            
            #line 74 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write("[i];");
            
            #line 74 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 if (appendWithIgnore) { 
            
            #line default
            #line hidden
            this.Write(" inputStream.ignore();");
            
            #line 74 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" \r\n    }\r\n");
            
            #line 76 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

            }
            else //Not an array
            {

            
            #line default
            #line hidden
            this.Write("    inputStream >> ");
            
            #line 81 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 81 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 if (appendWithIgnore) { 
            
            #line default
            #line hidden
            this.Write(" inputStream.ignore();");
            
            #line 81 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 82 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("\r\n    return inputStream;\r\n}\r\n\r\nstd::ostream& operator<<(std::ostream& outputStre" +
                    "am, const ");
            
            #line 90 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cgfTypeSymbol.Name));
            
            #line default
            #line hidden
            this.Write("& ");
            
            #line 90 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cgfTypeSymbol.VariableName));
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n");
            
            #line 92 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

        if (isFrameData)
        {

            
            #line default
            #line hidden
            this.Write("    Logging::LogInputData(outputStream) << \"Frame Input:\" << Game::GetFrameCounte" +
                    "r() << std::endl;\r\n\r\n");
            
            #line 98 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

        }
        else if (isGlobalData)
        {

            
            #line default
            #line hidden
            this.Write("    Logging::LogInputData(outputStream) << \"Global Input:\" << std::endl;\r\n\r\n");
            
            #line 105 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

        }

        CGFFieldSymbol previousSerializableFieldSymbol = null;
	    foreach(CGFFieldSymbol cgfFieldSymbol in cgfTypeSymbol.Fields)
	    {
			CGFAttributeDataList fieldAttributes = cgfFieldSymbol.Attributes;

            string cppType = CGFParserUtils.GetCPPStringForType(cgfFieldSymbol.TypeName);
            string variableName = cgfTypeSymbol.VariableName + "." + cgfFieldSymbol.Name;

			bool isFirstField = cgfTypeSymbol.Fields[0] == cgfFieldSymbol;

			bool isStandaloneFieldType = false;
			if (cgfFieldSymbol.TypeSymbol != null)
			{
				SerializeAttribute fieldTypeSerializeAttribute = cgfFieldSymbol.TypeSymbol.Attributes.GetAttribute<SerializeAttribute>();
				isStandaloneFieldType = fieldTypeSerializeAttribute != null && fieldTypeSerializeAttribute.Flags == SerializeFlags.CallbackFullLine;
			}

            bool prependWithLogging = !isStandaloneFieldType 
				&& ((isFirstField && isGlobalOrFrameData) || (!isFirstField && (previousSerializableFieldSymbol.Attributes.GetAttribute<GroupWithNextAttribute>() == null)));

			FixedSizeArrayAttribute fieldFixedSizeArrayAttribute = fieldAttributes.GetAttribute<FixedSizeArrayAttribute>();
			VariableSizeArrayAttribute fieldVariableSizeArrayAttribute = fieldAttributes.GetAttribute<VariableSizeArrayAttribute>();
            if (fieldFixedSizeArrayAttribute != null || fieldVariableSizeArrayAttribute != null)
            {
                string arraySizeVariableName;
                if (fieldFixedSizeArrayAttribute != null)
                {
                    arraySizeVariableName = fieldFixedSizeArrayAttribute.ArraySize.ToString();
                }
                else
                {
                    arraySizeVariableName = cgfTypeSymbol.VariableName + "." + fieldVariableSizeArrayAttribute.ArraySizeFieldName;
                }

            
            #line default
            #line hidden
            this.Write("    for(int i = 0; i < ");
            
            #line 142 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arraySizeVariableName));
            
            #line default
            #line hidden
            this.Write("; ++i)\r\n    {\r\n        ");
            
            #line 144 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 if (prependWithLogging) { 
            
            #line default
            #line hidden
            this.Write("Logging::LogInputData(outputStream)");
            
            #line 144 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("outputStream");
            
            #line 144 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" << ");
            
            #line 144 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write("[i];\r\n");
            
            #line 145 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 
				if (!isStandaloneFieldType)
				{
					if (fieldAttributes.GetAttribute<GroupWithNextAttribute>() != null)
					{

            
            #line default
            #line hidden
            this.Write("        bool isLastIndex = i == (");
            
            #line 151 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arraySizeVariableName));
            
            #line default
            #line hidden
            this.Write(" - 1);\r\n        if (!isLastIndex)\r\n        {\r\n            outputStream << \" \";\r\n " +
                    "       }\r\n        else\r\n        {\r\n            outputStream << std::endl;\r\n     " +
                    "   }\r\n");
            
            #line 160 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

					}
					else //!IsGroupWithNext
					{

            
            #line default
            #line hidden
            this.Write("        outputStream << std::endl;\r\n");
            
            #line 166 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

					} //IsGroupWithNext
				} //IsSystemType

            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 171 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

            }
            else //Not an array
            {
                bool isLastField = cgfTypeSymbol.Fields[cgfTypeSymbol.Fields.Count - 1] == cgfFieldSymbol;
                bool appendWithEndl = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || ((!isLastField || isGlobalOrFrameData) && (fieldAttributes.GetAttribute<GroupWithNextAttribute>() == null)));
                bool appendWithSpace = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || !isLastField);

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 if (prependWithLogging) { 
            
            #line default
            #line hidden
            this.Write("Logging::LogInputData(outputStream)");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("outputStream");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" << ");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 if (appendWithEndl) { 
            
            #line default
            #line hidden
            this.Write(" << std::endl");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } else if (appendWithSpace) { 
            
            #line default
            #line hidden
            this.Write(" << \" \"");
            
            #line 179 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 180 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

            }

			previousSerializableFieldSymbol = cgfFieldSymbol;
        }

            
            #line default
            #line hidden
            this.Write("\r\n    return outputStream;\r\n}\r\n\r\n//////////////////////////////////\r\n");
            
            #line 191 "D:\Files\Projects\Codingame\tools\CGFCodeGenerator\CGFCodeGenerator\CGFInlineCodeGenerator.tt"

    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CGFInlineCodeGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
