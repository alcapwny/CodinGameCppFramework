<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CGFCodeGenerator" #>
<#@ import namespace="CGFCodeGenerator.Core" #>
////////////////////////////////////////////////////////////////////
// This file is auto generated. 
// *Any modifications to this file will be lost.*
////////////////////////////////////////////////////////////////////

<#
    CGFDocument cgfDocument = CGFDocument;

	foreach(CGFTypeSymbol cgfTypeSymbol in cgfDocument.Types)
	{
		CGFAttributeDataList typeAttributes = cgfTypeSymbol.Attributes;
		SerializeAttribute typeSerializeAttribute = typeAttributes.GetAttribute<SerializeAttribute>();
		if (typeSerializeAttribute != null)
			continue;

		if (cgfTypeSymbol.IsEnum)
			continue;

		bool isFrameData = typeAttributes.GetAttribute<FrameDataAttribute>() != null;
		bool isGlobalData = typeAttributes.GetAttribute<GlobalDataAttribute>() != null;
		bool isGlobalOrFrameData = isFrameData || isGlobalData;
#>
std::istream& operator>>(std::istream& inputStream, <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>)
{
<#
	    foreach(CGFFieldSymbol cgfFieldSymbol in cgfTypeSymbol.Fields)
	    {
			CGFAttributeDataList fieldAttributes = cgfFieldSymbol.Attributes;

            string cppType = CGFParserUtils.GetCPPStringForType(cgfFieldSymbol.TypeName);
            string variableName = cgfTypeSymbol.VariableName + "." + cgfFieldSymbol.Name;

			bool isFirstField = cgfTypeSymbol.Fields[0] == cgfFieldSymbol;
            bool isLastField = cgfTypeSymbol.Fields[cgfTypeSymbol.Fields.Count - 1] == cgfFieldSymbol;
	
			bool isStandaloneFieldType = false;
			if (cgfFieldSymbol.TypeSymbol != null)
			{
				SerializeAttribute fieldTypeSerializeAttribute = cgfFieldSymbol.TypeSymbol.Attributes.GetAttribute<SerializeAttribute>();
				isStandaloneFieldType = fieldTypeSerializeAttribute != null && fieldTypeSerializeAttribute.Flags == SerializeFlags.CallbackFullLine;
			}
            bool appendWithIgnore = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || !isLastField);

            ArrayAttribute arrayAttribute = fieldAttributes.GetAttribute<ArrayAttribute>();
            if (arrayAttribute != null)
            {
                string indentationIncrement = "    ";
                string indentation = indentationIncrement;
                string arrayVariableName = variableName;
                
			    List<ArrayDimension> arrayDimensions = arrayAttribute.Dimensions;
                int arrayIndexCount = arrayDimensions.Count - 1;
			    for (int i = arrayIndexCount; i >= 0; --i)
			    {
				    ArrayDimension dimension = arrayDimensions[i];
                    string variableNameSuffix = new string('i', (arrayDimensions.Count - i));
                    string loopVariableName = new string('i', (arrayDimensions.Count - i));

                    string arraySize;
				    if (dimension.IsFixedSize)
				    {
                        arraySize = dimension.SizeString;
				    }
				    else
				    {
                        arraySize = cgfTypeSymbol.VariableName + "." + dimension.SizeString;
				    }

                    if (dimension.IsVariableSize)
                    {
#>
<#= indentation #><#= arrayVariableName #>.resize(<#= arraySize #>);
<#
                    }
#>
<#= indentation #>for(int <#= loopVariableName #> = 0; <#= loopVariableName #> < <#= arraySize #>; ++<#= loopVariableName #>)
<#= indentation #>{
<#
                    indentation += indentationIncrement;

                    if (i != 0)
                    {
                        ArrayDimension nextDimension = arrayDimensions[i - 1];
                        string nextArrayVariableName = cgfTypeSymbol.VariableName + "_" + variableNameSuffix;
#>
<#= indentation #>auto& <#= nextArrayVariableName #> = <#= arrayVariableName #>[<#= loopVariableName #>];
<#
                        arrayVariableName = nextArrayVariableName;
                    }
                    else
                    {
#>
<#= indentation #>inputStream >> <#= arrayVariableName #>[<#= loopVariableName #>];<# if (appendWithIgnore) { #> inputStream.ignore();<# } #> 
<#
                    }
			    }

                for (int i = 0; i < arrayDimensions.Count; ++i)
			    {
                    indentation = indentation.Remove(indentation.Length - indentationIncrement.Length);
#>
<#= indentation #>}
<#
                }
            }
            else //Not an array
            {
#>
    inputStream >> <#= variableName #>;<# if (appendWithIgnore) { #> inputStream.ignore();<# } #> 
<#
            }
        }
#>

    return inputStream;
}

std::ostream& operator<<(std::ostream& outputStream, const <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>)
{
<#
        if (isFrameData)
        {
#>
    Logging::LogInputData(outputStream) << "Frame Input:" << Game::GetFrameCounter() << std::endl;

<#
        }
        else if (isGlobalData)
        {
#>
    Logging::LogInputData(outputStream) << "Global Input:" << std::endl;

<#
        }

        CGFFieldSymbol previousSerializableFieldSymbol = null;
	    foreach(CGFFieldSymbol cgfFieldSymbol in cgfTypeSymbol.Fields)
	    {
			CGFAttributeDataList fieldAttributes = cgfFieldSymbol.Attributes;

            string cppType = CGFParserUtils.GetCPPStringForType(cgfFieldSymbol.TypeName);
            string variableName = cgfTypeSymbol.VariableName + "." + cgfFieldSymbol.Name;

			bool isFirstField = cgfTypeSymbol.Fields[0] == cgfFieldSymbol;

			bool isStandaloneFieldType = false;
			if (cgfFieldSymbol.TypeSymbol != null)
			{
				SerializeAttribute fieldTypeSerializeAttribute = cgfFieldSymbol.TypeSymbol.Attributes.GetAttribute<SerializeAttribute>();
				isStandaloneFieldType = fieldTypeSerializeAttribute != null && fieldTypeSerializeAttribute.Flags == SerializeFlags.CallbackFullLine;
			}

            bool prependWithLogging = !isStandaloneFieldType 
				&& ((isFirstField && isGlobalOrFrameData) || (!isFirstField && (previousSerializableFieldSymbol.Attributes.GetAttribute<GroupWithNextAttribute>() == null)));

            ArrayAttribute arrayAttribute = fieldAttributes.GetAttribute<ArrayAttribute>();
            if (arrayAttribute != null)
            {
                string indentationIncrement = "    ";
                string indentation = indentationIncrement;
                string arrayVariableName = variableName;
                
			    List<ArrayDimension> arrayDimensions = arrayAttribute.Dimensions;
                int arrayIndexCount = arrayDimensions.Count - 1;
			    for (int i = arrayIndexCount; i >= 0; --i)
			    {
				    ArrayDimension dimension = arrayDimensions[i];
                    string variableNameSuffix = new string('i', (arrayDimensions.Count - i));
                    string loopVariableName = new string('i', (arrayDimensions.Count - i));

                    string arraySize;
				    if (dimension.IsFixedSize)
				    {
                        arraySize = dimension.SizeString;
				    }
				    else
				    {
                        arraySize = cgfTypeSymbol.VariableName + "." + dimension.SizeString;
				    }
#>
<#= indentation #>for(int <#= loopVariableName #> = 0; <#= loopVariableName #> < <#= arraySize #>; ++<#= loopVariableName #>)
<#= indentation #>{
<#
                    indentation += indentationIncrement;

                    if (i != 0)
                    {
                        ArrayDimension nextDimension = arrayDimensions[i - 1];
                        string nextArrayVariableName = cgfTypeSymbol.VariableName + "_" + variableNameSuffix;
#>
<#= indentation #>auto& <#= nextArrayVariableName #> = <#= arrayVariableName #>[<#= loopVariableName #>];
<#
                        arrayVariableName = nextArrayVariableName;
                    }
                    else
                    {
#>
<#= indentation #><# if (prependWithLogging) { #>Logging::LogInputData(outputStream)<# } else { #>outputStream<# } #> << <#= arrayVariableName #>[<#= loopVariableName #>];
<# 
                        if (!isStandaloneFieldType)
                        {
                            if (fieldAttributes.GetAttribute<GroupWithNextAttribute>() != null)
                            {
#>
<#= indentation #>bool isLastIndex = i == (<#= arraySize #> - 1);
<#= indentation #>if (!isLastIndex)
<#= indentation #>{
<#= indentation #>    outputStream << " ";
<#= indentation #>}
<#= indentation #>else
<#= indentation #>{
<#= indentation #>    outputStream << std::endl;
<#= indentation #>}
<#
                            }
                            else //!IsGroupWithNext
                            {
#>
<#= indentation #>outputStream << std::endl;
<#
                            } //IsGroupWithNext
                        } //IsSystemType
                    }
			    }

                for (int i = 0; i < arrayDimensions.Count; ++i)
			    {
                    indentation = indentation.Remove(indentation.Length - indentationIncrement.Length);
#>
<#= indentation #>}
<#
                }
            }
            else //Not an array
            {
                bool isLastField = cgfTypeSymbol.Fields[cgfTypeSymbol.Fields.Count - 1] == cgfFieldSymbol;
                bool appendWithEndl = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || ((!isLastField || isGlobalOrFrameData) && (fieldAttributes.GetAttribute<GroupWithNextAttribute>() == null)));
                bool appendWithSpace = !isStandaloneFieldType && (isLastField && isGlobalOrFrameData || !isLastField);
#>
    <# if (prependWithLogging) { #>Logging::LogInputData(outputStream)<# } else { #>outputStream<# } #> << <#= variableName #><# if (appendWithEndl) { #> << std::endl<# } else if (appendWithSpace) { #> << " "<# } #>;
<#
            }

			previousSerializableFieldSymbol = cgfFieldSymbol;
        }
#>

    return outputStream;
}

//////////////////////////////////
<#
    }
#>