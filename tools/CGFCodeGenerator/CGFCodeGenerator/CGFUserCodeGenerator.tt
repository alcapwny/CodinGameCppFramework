<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CGFCodeGenerator" #>
<#@ import namespace="CGFCodeGenerator.Core" #>
/////////////////////////////////////////////////////////////////////////////////////
// This file is generated when it doesn't exist or when the generated content changes
// and this file hasn't been modified by the user (that is, the calculated hash
// matches the hash in this file).
//
// *Modify as needed!*
/////////////////////////////////////////////////////////////////////////////////////

<#
    CGFDocument cgfDocument = CGFDocument;

    foreach(CGFTypeSymbol cgfTypeSymbol in cgfDocument.Types)
    {
        if (cgfTypeSymbol.IsEnum)
            continue;

        ExtendAttribute typeExtendAttribute = cgfTypeSymbol.Attributes.GetAttribute<ExtendAttribute>();
        if (typeExtendAttribute == null)
            continue;

#>
class <#= cgfTypeSymbol.Name #> : public <#= cgfTypeSymbol.GeneratedName #>
{
public:
<#
        if (typeExtendAttribute.HasCustomSerialization)
        {
#>
    friend std::istream& operator>>(std::istream& inputStream, <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>);
    friend std::ostream& operator<<(std::ostream& outputStream, const <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>);
<#
        }
#>

};

/////////////////////////////////////////////////////////////////////////////////////
<#
    }

    foreach(CGFTypeSymbol cgfTypeSymbol in cgfDocument.Types)
    {
        ExtendAttribute typeExtendAttribute = cgfTypeSymbol.Attributes.GetAttribute<ExtendAttribute>();
        if (!cgfTypeSymbol.IsEnum && typeExtendAttribute == null)
            continue;

        if (typeExtendAttribute != null && !typeExtendAttribute.HasCustomSerialization)
            continue;
#>
// <#= cgfTypeSymbol.Name #>
std::istream& operator>>(std::istream& inputStream, <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>)
{


    return inputStream;
}

std::ostream& operator<<(std::ostream& outputStream, const <#= cgfTypeSymbol.Name #>& <#= cgfTypeSymbol.VariableName #>)
{


    return outputStream;
}

/////////////////////////////////////////////////////////////////////////////////////
<#
    }
#>